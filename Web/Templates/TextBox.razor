
<RadzenFormField Text="@Label" Style="width: 100%;" Variant="Variant.Outlined">
    <RadzenTextBox @bind-Value="@Value"
                   Style="width: 100%;"
                   Placeholder="@PlaceHolder"
                   AutoCompleteType="@AutoCompleteType"
                   @oninput=@((args) => OnValueChange(args.Value!.ToString()!))
                   Disabled="@Disable" />
</RadzenFormField>


@code {
    [Parameter]
    public AutoCompleteType AutoCompleteType { get; set; } = AutoCompleteType.On;
    [Parameter]
    public bool Disable { get; set; } = false;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;
    [Parameter]
    public string Value { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    [Parameter]

    public EventCallback Validate { get; set; }

    [Parameter]
    public EventCallback<string> Change { get; set; }

    async Task OnChangeEvent(ChangeEventArgs arg)
    {
        if (arg.Value is null || arg.Value.ToString() is null) return;

        await OnValueChange(arg.Value.ToString()!);
    }
    async Task OnValueChange(string value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(Value);

        if (Change.HasDelegate) await Change.InvokeAsync(Value);
        if (Validate.HasDelegate) await Validate.InvokeAsync();
    }
}
