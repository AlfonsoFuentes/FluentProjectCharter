// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.DatabaseImplementations.Databases;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(BlazorHeroContext))]
    [Migration("20250115003325_RemoveAssumption")]
    partial class RemoveAssumption
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectStakeHolder", b =>
                {
                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StakeHoldersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectsId", "StakeHoldersId");

                    b.HasIndex("StakeHoldersId");

                    b.ToTable("ProjectStakeHolder");
                });

            modelBuilder.Entity("Server.Database.Entities.AcceptanceCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliverableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableId");

                    b.ToTable("AcceptanceCriterias");
                });

            modelBuilder.Entity("Server.Database.Entities.AppState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppStates");
                });

            modelBuilder.Entity("Server.Database.Entities.BackGround", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("BackGrounds");
                });

            modelBuilder.Entity("Server.Database.Entities.Bennefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliverableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableId");

                    b.ToTable("Bennefits");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.BudgetItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliverableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableId");

                    b.HasIndex("ProjectId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Nozzles.Nozzle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EngineeringItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("HeightUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("InnerDiameter")
                        .HasColumnType("float");

                    b.Property<string>("InnerDiameterUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ItemConnectedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NominalDiameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NozzleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("OuterDiameter")
                        .HasColumnType("float");

                    b.Property<string>("OuterDiameterUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Thickness")
                        .HasColumnType("float");

                    b.Property<string>("ThicknessUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EngineeringItemId");

                    b.HasIndex("ItemConnectedId");

                    b.ToTable("Nozzles");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Nozzles.NozzleTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NominalDiameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NozzleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TemplateId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("NozzleTemplates");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.EngineeringFluidCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EngineeringFluidCodes");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.IsometricItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsometricId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PipingAccesoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsometricId");

                    b.HasIndex("PipingAccesoryId");

                    b.ToTable("IsometricItems");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PipingCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PipingCategoryId");

                    b.ToTable("PipingAccesorys");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesoryCodeBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PipingCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PipingCategoryId");

                    b.ToTable("PipingAccesoryCodeBrands");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesoryImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PipingAccesoryImages");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PipingAccesoryImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PipingAccesoryImageId");

                    b.ToTable("PipingCategorys");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingConnectionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccesoryConnectionSide")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NominalDiameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OuterDiameter")
                        .HasColumnType("float");

                    b.Property<string>("OuterDiameterUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PipingAccesoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Thickness")
                        .HasColumnType("float");

                    b.Property<string>("ThicknessUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PipingAccesoryId");

                    b.ToTable("PipingConnectionTypes");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.ProcessFlowDiagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliverableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProcessFlowDiagrams");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandTemplateId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Temporary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Equipment")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EquipmentTemplate")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EquipmentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InstrumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstrumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PipingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PipingTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<Guid?>("ValveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ValveTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Temporarys");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Taxes.TaxesItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SelectedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaxItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SelectedId");

                    b.HasIndex("TaxItemId");

                    b.ToTable("TaxesItems");
                });

            modelBuilder.Entity("Server.Database.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNodeOpen")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationStrategyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationStrategyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Server.Database.Entities.Constrainst", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Constrainsts");
                });

            modelBuilder.Entity("Server.Database.Entities.DecissionCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("DecissionCriterias");
                });

            modelBuilder.Entity("Server.Database.Entities.Deliverable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNodeOpen")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("Deliverables");
                });

            modelBuilder.Entity("Server.Database.Entities.DeliverableRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliverableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableId");

                    b.ToTable("DeliverableRisks");
                });

            modelBuilder.Entity("Server.Database.Entities.ExpertJudgement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExpertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("ExpertId");

                    b.ToTable("ExpertJudgements");
                });

            modelBuilder.Entity("Server.Database.Entities.HighLevelRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("HighLevelRequirements");
                });

            modelBuilder.Entity("Server.Database.Entities.IssueLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowToSolveIssue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SolveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StakeHolderIssuerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StakeHolderResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StakeHolderIssuerId");

                    b.HasIndex("StakeHolderResponsibleId");

                    b.ToTable("IssueLogs");
                });

            modelBuilder.Entity("Server.Database.Entities.KnownRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("KnownRisks");
                });

            modelBuilder.Entity("Server.Database.Entities.LearnedLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("LearnedLessons");
                });

            modelBuilder.Entity("Server.Database.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateofMeeting")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNodeOpen")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Server.Database.Entities.MeetingAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingAgreements");
                });

            modelBuilder.Entity("Server.Database.Entities.MeetingAttendant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StakeHolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("StakeHolderId");

                    b.ToTable("MeetingAttendants");
                });

            modelBuilder.Entity("Server.Database.Entities.OrganizationStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationStrategies");
                });

            modelBuilder.Entity("Server.Database.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("InitialBudget")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNodeOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProductiveAsset")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeetingTab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PercentageContingency")
                        .HasColumnType("float");

                    b.Property<double>("PercentageEngineering")
                        .HasColumnType("float");

                    b.Property<double>("PercentageTaxProductive")
                        .HasColumnType("float");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNeedType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Version0Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SponsorId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Server.Database.Entities.Requirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliverableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Requirements");
                });

            modelBuilder.Entity("Server.Database.Entities.RoleInsideProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleInsideProjects");
                });

            modelBuilder.Entity("Server.Database.Entities.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNodeOpen")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("Server.Database.Entities.StakeHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleInsideProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleInsideProjectId");

                    b.ToTable("StakeHolders");
                });

            modelBuilder.Entity("Server.Database.Entities.SucessfullFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("SucessfullFactors");
                });

            modelBuilder.Entity("Server.Database.Entities.WBSComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubComponentRelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubComponentRelationId");

                    b.ToTable("WBSComponents");
                });

            modelBuilder.Entity("Server.Database.Identity.BlazorHeroUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Commons.Alteration", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitaryCost")
                        .HasColumnType("float");

                    b.ToTable("Alterations");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Commons.EHS", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitaryCost")
                        .HasColumnType("float");

                    b.ToTable("EHSs");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Commons.Electrical", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitaryCost")
                        .HasColumnType("float");

                    b.ToTable("Electricals");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Commons.Foundation", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitaryCost")
                        .HasColumnType("float");

                    b.ToTable("Foundations");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Commons.Painting", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitaryCost")
                        .HasColumnType("float");

                    b.ToTable("Paintings");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Commons.Structural", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitaryCost")
                        .HasColumnType("float");

                    b.ToTable("Structurals");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Commons.Testing", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitaryCost")
                        .HasColumnType("float");

                    b.ToTable("Testings");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.EngineeringContingency.EngineeringDesign", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.ToTable("Engineerings");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<Guid?>("ProcessFlowDiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ProcessFlowDiagramId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Taxes.Tax", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.BudgetItem");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Equipments.EquipmentTemplate", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template");

                    b.Property<string>("ExternalMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.ToTable("EquipmentTemplates");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Instruments.InstrumentTemplate", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.ToTable("InstrumentTemplates");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipeTemplate", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EquivalentLenghPrice")
                        .HasColumnType("float");

                    b.Property<double>("LaborDayPrice")
                        .HasColumnType("float");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PipeTemplates");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Valves.ValveTemplate", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template");

                    b.Property<string>("ActuatorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasFeedBack")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.ToTable("ValveTemplates");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Equipments.Equipment", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem");

                    b.Property<Guid?>("EquipmentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("EquipmentTemplateId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Instruments.Instrument", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem");

                    b.Property<Guid?>("InstrumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("InstrumentTemplateId");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.Isometric", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem");

                    b.Property<string>("Diameter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FluidCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FluidCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Insulation")
                        .HasColumnType("bit");

                    b.Property<double>("LaborQuantity")
                        .HasColumnType("float");

                    b.Property<double>("LaborUnitaryCost")
                        .HasColumnType("float");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaterialQuantity")
                        .HasColumnType("float");

                    b.Property<double>("MaterialUnitaryCost")
                        .HasColumnType("float");

                    b.HasIndex("FluidCodeId");

                    b.ToTable("Isometrics");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Valves.Valve", b =>
                {
                    b.HasBaseType("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ValveTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ValveTemplateId");

                    b.ToTable("Valves");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Server.Database.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Server.Database.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Server.Database.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectStakeHolder", b =>
                {
                    b.HasOne("Server.Database.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.StakeHolder", null)
                        .WithMany()
                        .HasForeignKey("StakeHoldersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Database.Entities.AcceptanceCriteria", b =>
                {
                    b.HasOne("Server.Database.Entities.Deliverable", "Deliverable")
                        .WithMany("AcceptanceCriterias")
                        .HasForeignKey("DeliverableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliverable");
                });

            modelBuilder.Entity("Server.Database.Entities.BackGround", b =>
                {
                    b.HasOne("Server.Database.Entities.Case", "Case")
                        .WithMany("BackGrounds")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Server.Database.Entities.Bennefit", b =>
                {
                    b.HasOne("Server.Database.Entities.Deliverable", "Deliverable")
                        .WithMany("Bennefits")
                        .HasForeignKey("DeliverableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliverable");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.BudgetItem", b =>
                {
                    b.HasOne("Server.Database.Entities.Deliverable", "Deliverable")
                        .WithMany("BudgetItems")
                        .HasForeignKey("DeliverableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("BudgetItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliverable");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Nozzles.Nozzle", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem", "EngineeringItem")
                        .WithMany("Nozzles")
                        .HasForeignKey("EngineeringItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem", "ItemConnected")
                        .WithMany("ItemConnecteds")
                        .HasForeignKey("ItemConnectedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EngineeringItem");

                    b.Navigation("ItemConnected");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Nozzles.NozzleTemplate", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template", "Template")
                        .WithMany("NozzleTemplates")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.IsometricItem", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.Isometric", "Isometric")
                        .WithMany("IsometricItems")
                        .HasForeignKey("IsometricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesory", "PipingAccesory")
                        .WithMany("IsometricItems")
                        .HasForeignKey("PipingAccesoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Isometric");

                    b.Navigation("PipingAccesory");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesory", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingCategory", "PipingCategory")
                        .WithMany("PipingAccesories")
                        .HasForeignKey("PipingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PipingCategory");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesoryCodeBrand", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingCategory", "PipingCategory")
                        .WithMany("PipingAccesoryCodeBrands")
                        .HasForeignKey("PipingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PipingCategory");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingCategory", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesoryImage", "PipingAccesoryImage")
                        .WithMany("PipingCategories")
                        .HasForeignKey("PipingAccesoryImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PipingAccesoryImage");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingConnectionType", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesory", "PipingAccesory")
                        .WithMany("PipingConnectionTypes")
                        .HasForeignKey("PipingAccesoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PipingAccesory");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.ProcessFlowDiagram", b =>
                {
                    b.HasOne("Server.Database.Entities.Deliverable", null)
                        .WithMany("ProcessFlowDiagrams")
                        .HasForeignKey("DeliverableId");

                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("ProcessFlowDiagrams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Brand", "BrandTemplate")
                        .WithMany("BrandTemplates")
                        .HasForeignKey("BrandTemplateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BrandTemplate");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Taxes.TaxesItem", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.BudgetItem", "Selected")
                        .WithMany("TaxesSelecteds")
                        .HasForeignKey("SelectedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Server.Database.Entities.BudgetItems.Taxes.Tax", "TaxItem")
                        .WithMany("TaxesItems")
                        .HasForeignKey("TaxItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Selected");

                    b.Navigation("TaxItem");
                });

            modelBuilder.Entity("Server.Database.Entities.Case", b =>
                {
                    b.HasOne("Server.Database.Entities.OrganizationStrategy", "OrganizationStrategy")
                        .WithMany("Cases")
                        .HasForeignKey("OrganizationStrategyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("Cases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationStrategy");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Database.Entities.DecissionCriteria", b =>
                {
                    b.HasOne("Server.Database.Entities.Case", "Case")
                        .WithMany("DecissionCriterias")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Server.Database.Entities.Deliverable", b =>
                {
                    b.HasOne("Server.Database.Entities.Scope", "Scope")
                        .WithMany("Deliverables")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Server.Database.Entities.DeliverableRisk", b =>
                {
                    b.HasOne("Server.Database.Entities.Deliverable", "Deliverable")
                        .WithMany("DeliverableRisks")
                        .HasForeignKey("DeliverableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliverable");
                });

            modelBuilder.Entity("Server.Database.Entities.ExpertJudgement", b =>
                {
                    b.HasOne("Server.Database.Entities.Case", "Case")
                        .WithMany("ExpertJudgements")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.StakeHolder", "Expert")
                        .WithMany("Judgements")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Case");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Server.Database.Entities.HighLevelRequirement", b =>
                {
                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("HighLevelRequirements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Database.Entities.IssueLog", b =>
                {
                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("IssueLogs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.StakeHolder", "StakeHolderIssuer")
                        .WithMany()
                        .HasForeignKey("StakeHolderIssuerId");

                    b.HasOne("Server.Database.Entities.StakeHolder", "StakeHolderResponsible")
                        .WithMany()
                        .HasForeignKey("StakeHolderResponsibleId");

                    b.Navigation("Project");

                    b.Navigation("StakeHolderIssuer");

                    b.Navigation("StakeHolderResponsible");
                });

            modelBuilder.Entity("Server.Database.Entities.KnownRisk", b =>
                {
                    b.HasOne("Server.Database.Entities.Case", "Case")
                        .WithMany("KnownRisks")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Server.Database.Entities.LearnedLesson", b =>
                {
                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("LearnedLessons")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Database.Entities.Meeting", b =>
                {
                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("Meetings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Database.Entities.MeetingAgreement", b =>
                {
                    b.HasOne("Server.Database.Entities.Meeting", "Meeting")
                        .WithMany("MeetingAgreements")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Server.Database.Entities.MeetingAttendant", b =>
                {
                    b.HasOne("Server.Database.Entities.Meeting", "Meeting")
                        .WithMany("MeetingAttendants")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.StakeHolder", "StakeHolder")
                        .WithMany("MeetingAttendants")
                        .HasForeignKey("StakeHolderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Meeting");

                    b.Navigation("StakeHolder");
                });

            modelBuilder.Entity("Server.Database.Entities.Project", b =>
                {
                    b.HasOne("Server.Database.Entities.StakeHolder", "Manager")
                        .WithMany("Managers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Server.Database.Entities.StakeHolder", "Sponsor")
                        .WithMany("Sponsors")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Manager");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Server.Database.Entities.Requirement", b =>
                {
                    b.HasOne("Server.Database.Entities.Deliverable", "Deliverable")
                        .WithMany("Requirements")
                        .HasForeignKey("DeliverableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("Requirements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.StakeHolder", "RequestedBy")
                        .WithMany("RequirementRequestedBys")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Server.Database.Entities.StakeHolder", "Responsible")
                        .WithMany("RequirementResponsibles")
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Deliverable");

                    b.Navigation("Project");

                    b.Navigation("RequestedBy");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("Server.Database.Entities.Scope", b =>
                {
                    b.HasOne("Server.Database.Entities.Case", "Case")
                        .WithMany("Scopes")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Server.Database.Entities.StakeHolder", b =>
                {
                    b.HasOne("Server.Database.Entities.RoleInsideProject", "RoleInsideProject")
                        .WithMany("StakeHolders")
                        .HasForeignKey("RoleInsideProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RoleInsideProject");
                });

            modelBuilder.Entity("Server.Database.Entities.SucessfullFactor", b =>
                {
                    b.HasOne("Server.Database.Entities.Case", "Case")
                        .WithMany("SucessfullFactors")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Server.Database.Entities.WBSComponent", b =>
                {
                    b.HasOne("Server.Database.Entities.Project", "Project")
                        .WithMany("WBSComponents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Database.Entities.WBSComponent", "SubComponentRelation")
                        .WithMany("SubComponents")
                        .HasForeignKey("SubComponentRelationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Project");

                    b.Navigation("SubComponentRelation");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.ProcessFlowDiagram", "ProcessFlowDiagram")
                        .WithMany("EngineeringItems")
                        .HasForeignKey("ProcessFlowDiagramId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProcessFlowDiagram");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Equipments.Equipment", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Equipments.EquipmentTemplate", "EquipmentTemplate")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentTemplateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EquipmentTemplate");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Instruments.Instrument", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Instruments.InstrumentTemplate", "InstrumentTemplate")
                        .WithMany("Instruments")
                        .HasForeignKey("InstrumentTemplateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InstrumentTemplate");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.Isometric", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.EngineeringFluidCode", "FluidCode")
                        .WithMany("Isometrics")
                        .HasForeignKey("FluidCodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FluidCode");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Valves.Valve", b =>
                {
                    b.HasOne("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Valves.ValveTemplate", "ValveTemplate")
                        .WithMany("Valves")
                        .HasForeignKey("ValveTemplateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ValveTemplate");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.BudgetItem", b =>
                {
                    b.Navigation("TaxesSelecteds");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Brand", b =>
                {
                    b.Navigation("BrandTemplates");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.EngineeringFluidCode", b =>
                {
                    b.Navigation("Isometrics");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesory", b =>
                {
                    b.Navigation("IsometricItems");

                    b.Navigation("PipingConnectionTypes");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingAccesoryImage", b =>
                {
                    b.Navigation("PipingCategories");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.PipingCategory", b =>
                {
                    b.Navigation("PipingAccesories");

                    b.Navigation("PipingAccesoryCodeBrands");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.ProcessFlowDiagram", b =>
                {
                    b.Navigation("EngineeringItems");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Template", b =>
                {
                    b.Navigation("NozzleTemplates");
                });

            modelBuilder.Entity("Server.Database.Entities.Case", b =>
                {
                    b.Navigation("BackGrounds");

                    b.Navigation("DecissionCriterias");

                    b.Navigation("ExpertJudgements");

                    b.Navigation("KnownRisks");

                    b.Navigation("Scopes");

                    b.Navigation("SucessfullFactors");
                });

            modelBuilder.Entity("Server.Database.Entities.Deliverable", b =>
                {
                    b.Navigation("AcceptanceCriterias");

                    b.Navigation("Bennefits");

                    b.Navigation("BudgetItems");

                    b.Navigation("DeliverableRisks");

                    b.Navigation("ProcessFlowDiagrams");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Server.Database.Entities.Meeting", b =>
                {
                    b.Navigation("MeetingAgreements");

                    b.Navigation("MeetingAttendants");
                });

            modelBuilder.Entity("Server.Database.Entities.OrganizationStrategy", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("Server.Database.Entities.Project", b =>
                {
                    b.Navigation("BudgetItems");

                    b.Navigation("Cases");

                    b.Navigation("HighLevelRequirements");

                    b.Navigation("IssueLogs");

                    b.Navigation("LearnedLessons");

                    b.Navigation("Meetings");

                    b.Navigation("ProcessFlowDiagrams");

                    b.Navigation("Requirements");

                    b.Navigation("WBSComponents");
                });

            modelBuilder.Entity("Server.Database.Entities.RoleInsideProject", b =>
                {
                    b.Navigation("StakeHolders");
                });

            modelBuilder.Entity("Server.Database.Entities.Scope", b =>
                {
                    b.Navigation("Deliverables");
                });

            modelBuilder.Entity("Server.Database.Entities.StakeHolder", b =>
                {
                    b.Navigation("Judgements");

                    b.Navigation("Managers");

                    b.Navigation("MeetingAttendants");

                    b.Navigation("RequirementRequestedBys");

                    b.Navigation("RequirementResponsibles");

                    b.Navigation("Sponsors");
                });

            modelBuilder.Entity("Server.Database.Entities.WBSComponent", b =>
                {
                    b.Navigation("SubComponents");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.EngineeringItem", b =>
                {
                    b.Navigation("ItemConnecteds");

                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.Taxes.Tax", b =>
                {
                    b.Navigation("TaxesItems");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Equipments.EquipmentTemplate", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Instruments.InstrumentTemplate", b =>
                {
                    b.Navigation("Instruments");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Valves.ValveTemplate", b =>
                {
                    b.Navigation("Valves");
                });

            modelBuilder.Entity("Server.Database.Entities.BudgetItems.ProcessFlowDiagrams.Pipings.Isometric", b =>
                {
                    b.Navigation("IsometricItems");
                });
#pragma warning restore 612, 618
        }
    }
}
