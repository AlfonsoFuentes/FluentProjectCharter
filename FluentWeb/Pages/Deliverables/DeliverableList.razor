@using Shared.Models.Deliverables.Responses


<FluentStack Orientation="Orientation.Vertical" Style="width:100%">
    <FluentStack Orientation=" Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="6">
        <FluentButton Id="addDel" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="addDel" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Deliverable</FluentTooltip>

        <FluentLabel Typo="Typography.Subject" Style="overflow-wrap: break-word;"><strong>Manage Deliverables</strong></FluentLabel>
        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
                      @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())"
                      Placeholder="Search..." />
    </FluentStack>
    @foreach (var row in FilteredItems)
    {
        <FluentStack Orientation=" Orientation.Vertical" Style="border:solid 1px lightgray;padding:6px; border-radius:5px;">
            <FluentStack Orientation=" Orientation.Horizontal">
                <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word;">@row.Name</FluentLabel>
                <FluentSpacer />
                <div>
                    <FluentButton Id="@($"edit{row.Id}")" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(row))">

                    </FluentButton>
                    <FluentTooltip Anchor="@($"edit{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
                    <FluentButton Id="@($"delete{row.Id}")" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(row))">

                    </FluentButton>
                    <FluentTooltip Anchor="@($"delete{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>

                    <FluentButton Id="@($"Show{row.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowBidirectionalUpDown())" OnClick="@(()=>Show(row))">

                    </FluentButton>
                    <FluentTooltip Anchor="@($"Show{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Show</FluentTooltip>

                </div>
            </FluentStack>
            @if (App.AppState.DeliverableId != null && row.Id == App.AppState.DeliverableId)
            {
                <FluentTabs ShowActiveIndicator="false" Style="width:100%" @bind-ActiveTabId=@App.AppState.DeliverableTab OnTabChange="HandleOnTabChange">
                    <FluentTab Label="Requirements" Id="Requirements">
                        <Content>
                            <RequirementList GetAll="GetAll" Parent="@row"></RequirementList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Assumptions" Id="Assumptions">
                        <Content>
                            <AssumptionList GetAll="GetAll" Parent="@row"></AssumptionList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Risks" Id="Risks">
                        <Content>
                            <DeliverableRiskList GetAll="GetAll" Parent="@row"></DeliverableRiskList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Constrainsts" Id="Constrainsts">
                        <Content>
                            <ConstraintList GetAll="GetAll" Parent="@row"></ConstraintList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Bennefits" Id="Bennefits">
                        <Content>
                            <BennefitList GetAll="GetAll" Parent="@row"></BennefitList>
                        </Content>

                    </FluentTab>

                </FluentTabs>
            }

        </FluentStack>
    }



</FluentStack>

@code {

    private async Task HandleOnTabChange(FluentTab tab)
    {
        App.AppState.DeliverableTab = tab.Id;
        await AppStateService.UpdateDeliverableTab(App.AppState);
 
        StateHasChanged();

    }
    public async Task Show(DeliverableResponse response)
    {
        App.AppState.DeliverableId = App.AppState.DeliverableId == response.Id ? null : App.AppState.DeliverableId = response.Id;
        await AppStateService.UpdateScopeDeliverable(App.AppState);
        await App.GetActiveProject();
        StateHasChanged();

    }

}
