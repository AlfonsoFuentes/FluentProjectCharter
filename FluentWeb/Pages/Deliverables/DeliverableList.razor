<TemplatedList T="DeliverableResponse" FilteredItems="@FilteredItems" Title="Manage Deliverables" Context="context">
    <MenuButtons>
        <FluentButton Id="addDel" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="addDel" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Deliverable</FluentTooltip>


        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
        @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())" Placeholder="Search..." />
    </MenuButtons>
    <Content>
        <FluentLabel Typo="Typography.Body">@context.Order</FluentLabel>
        <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word; padding:2px;">@context.Name</FluentLabel>
    </Content>
    <Buttons>
        <FluentButton Id="@($"Up{context.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowUp())" OnClick="@(()=>Up(context))" Disabled="@(context.Order==1)"></FluentButton>
        <FluentTooltip Anchor="@($"Up{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Up</FluentTooltip>

        <FluentButton Id="@($"Down{context.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowDown())" OnClick="@(()=>Down(context))" Disabled="@(context.Order==Parent.LastOrder)"></FluentButton>
        <FluentTooltip Anchor="@($"Down{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Down</FluentTooltip>

        <FluentButton Id="@($"edit{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"edit{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
        <FluentButton Id="@($"delete{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"delete{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>

        <FluentButton Id="@($"Show{context.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowBidirectionalUpDown())" OnClick="@(()=>Show(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"Show{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Show</FluentTooltip>

    </Buttons>

    <ContentNode>
        <FluentTabs ShowActiveIndicator="false" Style="width:100%" @bind-ActiveTabId=@context.Tab OnTabChange="HandleOnTabChange">

            <FluentTab Label="Budget Items" Id="BudgetItems">
                <Content>
                    <DeliverableBudgetItemList GetAll="GetAll" ProjectId="context.ProjectId" DeliverableId="context.Id" Items="context.BudgetItems"></DeliverableBudgetItemList>
                </Content>

            </FluentTab>

        </FluentTabs>
    </ContentNode>
</TemplatedList>



@code {
  
    private async Task HandleOnTabChange(FluentTab tab)
    {
        if (App.Project == null || App.Project.CurrentCase == null || App.Project.CurrentCase.CurrentScope == null) return;
        if (App.Project.CurrentCase.CurrentScope.CurrentDeliverable != null)
        {
            App.Project.CurrentCase.CurrentScope.CurrentDeliverable!.Tab = tab.Id;
            await GenericService.UpdateState(App.Project.CurrentCase.CurrentScope.CurrentDeliverable!);
        }

        StateHasChanged();

    }

    public async Task Show(DeliverableResponse response)
    {
        if (App.Project == null || App.Project.CurrentCase == null || App.Project.CurrentCase.CurrentScope == null) return;

        if (App.Project.CurrentCase.CurrentScope.CurrentDeliverable == null)
        {
            App.Project.CurrentCase.CurrentScope.CurrentDeliverable = response;
         
            response.Open();
            await GenericService.UpdateState(response);

        }
        else if (App.Project.CurrentCase.CurrentScope.CurrentDeliverable!.Id == response.Id)
        {
       
            response.Close();
            App.Project.CurrentCase.CurrentScope.CurrentDeliverable = null!;

            await GenericService.UpdateState(response);
        }
        else
        {

            if (currentDeliverable != null)
            {
                currentDeliverable.Close();
                await GenericService.UpdateState(currentDeliverable);
            }

            App.Project.CurrentCase.CurrentScope.CurrentDeliverable = response;

            App.Project.CurrentCase.CurrentScope.CurrentDeliverable!.Open();
        
            await GenericService.UpdateState(App.Project.CurrentCase.CurrentScope.CurrentDeliverable!);
        }
        StateHasChanged();
        if (App.Project.CurrentCase.CurrentScope.CurrentDeliverable != null)
        {
            var result = await GenericService.GetById<DeliverableResponse,
            GetDeliverableByIdRequest>(new GetDeliverableByIdRequest()
                {
                    Id = App.Project.CurrentCase.CurrentScope.CurrentDeliverable!.Id
                });

            if (result.Succeeded)
            {
                App.Project.CurrentCase.CurrentScope.CurrentDeliverable = result.Data;
            }

        }


    }

}
