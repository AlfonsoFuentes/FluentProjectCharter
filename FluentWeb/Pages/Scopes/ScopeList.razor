@using Shared.Models.Scopes.Records
@using Shared.Models.Scopes.Responses


<FluentStack Orientation="Orientation.Vertical" Style="width:100%;border:solid 1px lightgray;padding:6px; border-radius:5px;">
    <FluentLabel Typo="Typography.Subject" Style="overflow-wrap: break-word;"><strong>Manage Scopes</strong></FluentLabel>
    <FluentStack Orientation=" Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="6">
        <FluentButton Id="addScop" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="addScop" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Scope</FluentTooltip>

      
        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
                      @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())"
                      Placeholder="Search..." />
    </FluentStack>
    @foreach (var row in FilteredItems)
    {
        <FluentStack Orientation=" Orientation.Vertical" Style="border:solid 1px lightgray;padding:6px; border-radius:5px;">
            <FluentStack Orientation=" Orientation.Horizontal">
                <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word;">@row.Name</FluentLabel>
                <FluentSpacer />
                <div>
                    <FluentButton Id="@($"edit{row.Id}")" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(row))">

                    </FluentButton>
                    <FluentTooltip Anchor="@($"edit{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
                    <FluentButton Id="@($"delete{row.Id}")" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(row))">

                    </FluentButton>
                    <FluentTooltip Anchor="@($"delete{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>

                    <FluentButton Id="@($"Show{row.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowBidirectionalUpDown())" OnClick="@(()=>Show(row))"></FluentButton>
                    <FluentTooltip Anchor="@($"Show{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Show</FluentTooltip>

                </div>
            </FluentStack>
            @if (row.IsNodeOpen)
            {
                <DeliverableList Parent="@App.Project.CurrentCase!.CurrentScope" GetAll="GetAll"></DeliverableList>
            }

        </FluentStack>
    }




</FluentStack>

@code {


    public async Task Show(ScopeResponse response)
    {
        if (App.Project == null || App.Project.CurrentCase == null) return;

        if (App.Project.CurrentCase.CurrentScope == null)
        {
            App.Project.CurrentCase.CurrentScope = response;
            response.Open();
            await GenericService.UpdateState(response);

        }
        else if (App.Project.CurrentCase.CurrentScope.Id == response.Id)
        {
            response.Close();
            App.Project.CurrentCase.CurrentScope = null!;
            await GenericService.UpdateState(response);
        }
        else
        {

            if (currentScope != null)
            {
                currentScope.Close();
                await GenericService.UpdateState(currentScope);
            }

            App.Project.CurrentCase.CurrentScope = response;

            App.Project.CurrentCase.CurrentScope.Open();
            await GenericService.UpdateState(App.Project.CurrentCase.CurrentScope);
        }
        StateHasChanged();
        if (App.Project.CurrentCase.CurrentScope != null)
        {
            var result = await GenericService.GetById<ScopeResponse, GetScopeByIdRequest>(new GetScopeByIdRequest() { Id = App.Project.CurrentCase.CurrentScope.Id });

            if (result.Succeeded)
            {
                App.Project.CurrentCase.CurrentScope = result.Data;
            }

        }
        StateHasChanged();
    }

}
