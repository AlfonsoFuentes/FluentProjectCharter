
@using FluentWeb.Pages.Deliverables
@using Shared.Models.Scopes.Requests

<FluentStack Orientation="Orientation.Vertical" Style="width:100%">
    <FluentStack Orientation=" Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="6">
        <FluentButton Id="addScop" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="addScop" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Scope</FluentTooltip>

        <FluentLabel Typo="Typography.Subject" Style="overflow-wrap: break-word;"><strong>Manage Scopes</strong></FluentLabel>
        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
                      @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())"
          
                      Placeholder="Search..." />
    </FluentStack>
    @if (CreateResponse != null)
    {
        <CreateTemplate @ref=CreateForm TItem="CreateScopeRequest" @bind-Model="@CreateResponse"
                        Cancel="CancelAsync" GetAll="GetAll" Title="Create Scope">
            <Content>
                <TextArea Label="Name"
                          @bind-Value=@CreateResponse.Name
                          Placeholder="Define name"
                          Validate="CreateForm.ValidateAsync"></TextArea>
                <ValidationMessage For="() => CreateResponse.Name" style="color:red; font-size:x-small;" />
            </Content>

        </CreateTemplate>

    }

    <FluentAccordion Style="width:100%" ExpandMode="AccordionExpandMode.Multi">
        @foreach (var row in FilteredItems)
        {
            @if (EditResponse != null && EditResponse.Id == row.Id)
            {
                <EditTemplate @ref=EditForm TItem="UpdateScopeRequest" @bind-Model=@EditResponse Cancel="CancelAsync"
                              GetAll="GetAll" Title="Edit Scope">
                    <Content>
                        <TextArea Label="Name"
                                  @bind-Value=@EditResponse.Name
                                  Placeholder="Define name"
                                  Validate="EditForm.ValidateAsync"></TextArea>
                        <ValidationMessage For="() => EditResponse.Name" style="color:red; font-size:x-small;" />
                    </Content>

                </EditTemplate>

            }
            else
            {
                <FluentAccordionItem>
                    <HeadingTemplate>
                        <FluentStack Orientation=" Orientation.Horizontal">
                            <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word;">@row.Name</FluentLabel>
                            <FluentSpacer />
                            <div>
                                <FluentButton Id="editScop" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(row))">

                                </FluentButton>
                                <FluentTooltip Anchor="editScop" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
                                <FluentButton Id="deleteScop" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(row))">

                                </FluentButton>
                                <FluentTooltip Anchor="deleteScop" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>


                            </div>
                        </FluentStack>

                    </HeadingTemplate>
                    <ChildContent>
                        <DeliverableList Parent="@row" Cancel="CancelAsync" GetAll="GetAll"></DeliverableList>
                    </ChildContent>
                </FluentAccordionItem>
            }

        }

    </FluentAccordion>


</FluentStack>

@code {

    CreateTemplate<CreateScopeRequest> CreateForm = null!;
    EditTemplate<UpdateScopeRequest> EditForm = null!;
    
}
