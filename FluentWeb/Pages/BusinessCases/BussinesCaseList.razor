<TemplatedList T="CaseResponse" FilteredItems="@FilteredItems" Title="Manage Busines Cases" Context="context">
    <MenuButtons>
        <FluentButton Id="addcase" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="addcase" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Case</FluentTooltip>

        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
                      @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())" Placeholder="Search..." />
    </MenuButtons>
    <Content>
        <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word; padding:2px;">@context.Name</FluentLabel>
    </Content>
    <Buttons>
        <FluentButton Id="@($"edit{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"edit{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
        <FluentButton Id="@($"delete{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"delete{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>

        <FluentButton Id="@($"Show{context.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowBidirectionalUpDown())" OnClick="@(()=>Show(context))"></FluentButton>
        <FluentTooltip Anchor="@($"Show{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Show</FluentTooltip>

    </Buttons>

    <ContentNode>
        <BusinessCasesTab GetAll="GetAll" Parent="@context"></BusinessCasesTab>

    </ContentNode>
</TemplatedList>




@code {

    public async Task Show(CaseResponse response)
    {
        if (App.Project == null) return;

        if (App.Project.CurrentCase == null)
        {
            App.Project.CurrentCase = response;
            response.Open();
            await GenericService.UpdateState(response);

        }
        else if (App.Project.CurrentCase.Id == response.Id)
        {
            response.Close();
            App.Project.CurrentCase = null!;
            await GenericService.UpdateState(response);
        }
        else
        {

            if (currentCase != null)
            {
                currentCase.Close();
                await GenericService.UpdateState(currentCase);
            }

            App.Project.CurrentCase = response;

            App.Project.CurrentCase.Open();
            await GenericService.UpdateState(App.Project.CurrentCase);
        }
        StateHasChanged();
        if (App.Project.CurrentCase != null)
        {
            var result = await GenericService.GetById<CaseResponse, GetCaseByIdRequest>(new GetCaseByIdRequest() { Id = App.Project.CurrentCase.Id });

            if (result.Succeeded)
            {
                App.Project.CurrentCase = result.Data;
            }

        }
        StateHasChanged();

    }

}
