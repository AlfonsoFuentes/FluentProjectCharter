@using Shared.Models.Cases.Responses
<FluentStack Orientation="Orientation.Vertical" Style="width:100%;height:100%;">
    <FluentStack Orientation=" Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="6">
        <FluentButton Id="addcase" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="addcase" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Case</FluentTooltip>

        <FluentLabel Typo="Typography.Subject" Style="overflow-wrap: break-word;"><strong>Manage busines cases</strong></FluentLabel>
        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
        @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())"
        Placeholder="Search..." />
    </FluentStack>
    @foreach (var row in FilteredItems)
    {
        <FluentStack Orientation=" Orientation.Vertical" Style="border:solid 1px lightgray;padding:6px; border-radius:5px;">
            <FluentStack Orientation=" Orientation.Horizontal">
                <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word;">@row.Name</FluentLabel>
                <FluentSpacer />
                <div>
                    <FluentButton Id="@($"edit{row.Id}")" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(row))">

                    </FluentButton>
                    <FluentTooltip Anchor="@($"edit{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
                    <FluentButton Id="@($"delete{row.Id}")" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(row))">

                    </FluentButton>
                    <FluentTooltip Anchor="@($"delete{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>

                    <FluentButton Id="@($"Show{row.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowBidirectionalUpDown())" OnClick="@(()=>Show(row))"></FluentButton>
                    <FluentTooltip Anchor="@($"Show{row.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Show</FluentTooltip>


                </div>
            </FluentStack>
            @if (App.AppState.CaseId != null & row.Id == App.AppState.CaseId)
            {
                <FluentTabs ShowActiveIndicator="false" Style="width:100%" OnTabChange="HandleOnTabChange" @bind-ActiveTabId=@App.AppState.CaseTab>
                    <FluentTab Label="Backgrounds" Id="Backgrounds">
                        <Content>
                            <BackGroundList GetAll="GetAll" Parent="@row"></BackGroundList>
                        </Content>

                    </FluentTab>

                    <FluentTab Label="Expert Judgement" Id="Expert">
                        <Content>
                            <ExpertJudgementList GetAll="GetAll" Parent="@row"></ExpertJudgementList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Scope" Id="Scope">
                        <Content>
                            <ScopeList GetAll="GetAll" Parent="@row"></ScopeList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Known risks" Id="Known">
                        <Content>
                            <KnownRiskList GetAll="GetAll" Parent="@row"></KnownRiskList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Sucessfull factors" Id="Sucessfull">
                        <Content>
                            <SucessfullFactorList GetAll="GetAll" Parent="@row"></SucessfullFactorList>
                        </Content>

                    </FluentTab>
                    <FluentTab Label="Decission criterias" Id="Decission">
                        <Content>
                            <DecissionCriteriaList GetAll="GetAll" Parent="@row"></DecissionCriteriaList>
                        </Content>

                    </FluentTab>
                </FluentTabs>
            }

        </FluentStack>
    }


</FluentStack>


@code {

    public async Task Show(CaseResponse response)
    {
        App.AppState.CaseId = App.AppState.CaseId == response.Id ? null : response.Id;
        await AppStateService.UpdateProjectCase(App.AppState);
        await App.GetActiveProject();
        StateHasChanged();

    }
    private async Task HandleOnTabChange(FluentTab tab)
    {
        App.AppState.CaseTab = tab.Id;
        await AppStateService.UpdateCaseTab(App.AppState);
   
        StateHasChanged();
    }

}
