@page "/"


<TemplatedList T="ProjectResponse" FilteredItems="@FilteredItems" Title="Manage Projects" Context="context">
    <MenuButtons>
        <FluentButton Id="createproject" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="createproject" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Create Project</FluentTooltip>



        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
                      @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())" Placeholder="Search..." />
    </MenuButtons>
    <Content>
        <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word; padding:2px;">@context.Name</FluentLabel>
    </Content>
    <Buttons>
        <FluentButton Id="@($"editproject{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"editproject{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>

        <FluentButton id="@($"pdfproject{context.Id}")" IconEnd="@(new Icons.Regular.Size20.DocumentPdf())" OnClick="@(()=>Export(context))"></FluentButton>
        <FluentTooltip Anchor="@($"pdfproject{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Create PDF</FluentTooltip>

        <FluentButton Id="@($"deleteproject{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"deleteproject{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>

        <FluentButton Id="@($"Showproject{context.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowBidirectionalUpDown())" OnClick="@(()=>Show(context))">

        </FluentButton>
        <FluentTooltip Anchor="@($"Showproject{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Show</FluentTooltip>

    </Buttons>

    <ContentNode>
        <ProjectTabs GetAll="UpdateAll" Parent="@context"></ProjectTabs>

    </ContentNode>
</TemplatedList>





@code {


    public async Task Show(ProjectResponse response)
    {
        if (App.ProjectList.CurrentProject == null)
        {
            App.ProjectList.CurrentProject = response;
            response.Open();
            await GenericService.UpdateState(response);

        }
        else if (App.ProjectList.CurrentProject.Id == response.Id)
        {
            response.Close();
            App.ProjectList.CurrentProject = null!;
            await GenericService.UpdateState(response);
        }
        else
        {
            App.ProjectList.CurrentProject.Close();
            await GenericService.UpdateState(App.ProjectList.CurrentProject);
            App.ProjectList.CurrentProject = response;

            response.Open();
            await GenericService.UpdateState(response);
        }





    }

}