@page "/"
@using FluentWeb.Pages.Tabs

@attribute [Authorize]
@* <FluentStack Orientation="Orientation.Vertical" Width="100%">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">

        <IconButton IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@AddNew" ToolTip="Add New" Disabled="@(CreateRow!=null)"></IconButton>
        <IconButton IconEnd="@(new Icons.Regular.Size20.ArrowUp())" OnClick="@Up" Disabled="@DisableUpButton" ToolTip="Up"></IconButton>
        <IconButton IconEnd="@(new Icons.Regular.Size20.ArrowDown())" OnClick="Down" Disabled="@DisableDownButton" ToolTip="Down"></IconButton>

        <FluentSpacer />
        <MudField  Typo="Typo.Body">Selected: @CurrentRowName</MudField >
        <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Name..." />

    </FluentStack>
    <div class="grid" style="width: 100%; overflow-x:auto;">

        <FluentDataGrid id="defaultGrid"
                        Items=@FilteredItems.AsQueryable()
                        TGridItem="ProjectResponse"
                        AutoFit="true"
                        Pagination="@pagination"
                        DisplayMode="DataGridDisplayMode.Table"
                        RowSize="@DataGridRowSize.Small"
                        Style="width:100%">
            <TemplateColumn Title="Name" Width="80%" Context="context">
                @{
                    if (CreateRow != null && CreateRow.Id == context.Id)
                    {
                        <FluentTextArea Spellcheck="true"
                        Resize="TextAreaResize.Vertical"
                        @bind-Value=@CreateRow.Name
                        Immediate="true"
                        Style="width: 100%;" />


                    }
                    else if (EditRow == context)
                    {
                        <FluentTextArea Spellcheck="true"
                        Resize="TextAreaResize.Vertical"
                        @bind-Value=@context.Name
                        Immediate="true"
                        Style="width: 100%;" />
                    }
                    else
                    {
                        @context.Name


                    }
                }


            </TemplateColumn>
            <TemplateColumn Width="20%" Context="context">
                @if (CreateRow != null && CreateRow.Id == context.Id)
                {
                    <FluentStack Orientation="Orientation.Horizontal">
                        <IconButton IconEnd="@(new Icons.Regular.Size16.Save())" OnClick="@Create" ToolTip="Save" Disabled="@DisableSaveButton(context)"></IconButton>
                        <IconButton IconEnd="@(new Icons.Regular.Size16.CalendarCancel())" OnClick="@CancelCreate" ToolTip="Cancel"></IconButton>
                    </FluentStack>

                }
                else if (EditRow == context)
                {
                    <FluentStack Orientation="Orientation.Horizontal">
                        <IconButton IconEnd="@(new Icons.Regular.Size16.Save())" OnClick="@(()=>Update(context))" ToolTip="Save" Disabled="@DisableSaveButton(context)"></IconButton>
                        <IconButton IconEnd="@(new Icons.Regular.Size16.CalendarCancel())" OnClick="@CancelEdit" ToolTip="Cancel"></IconButton>
                    </FluentStack>
                }
                else
                {
                    <IconButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(()=>Edit(context))" ToolTip="Edit"></IconButton>
                  
                    @if (context.Status.Id == ProjectStatusEnum.Approved.Id)
                    {
                        <IconButton IconEnd="@(new Icons.Regular.Size16.Money())" OnClick="@(()=>GotBudgetItems(context))" ToolTip="Budget Items"></IconButton>
                    }
                    else
                    {
                        <IconButton IconEnd="@(new Icons.Regular.Size16.Checkmark())" OnClick="@(()=>Approve(context))" ToolTip="Approve"></IconButton>
                    }

                    <IconButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(()=>Delete(context))" ToolTip="Delete"></IconButton>

                }

            </TemplateColumn>

        </FluentDataGrid>
    </div>
    @if (pages == MaxNumberOfPages)
    {
        <div class="page-buttons">
            Page:
            @if (pagination.TotalItemCount.HasValue)
            {
                for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <MudButton  @onclick="@(() => GoToPageAsync(capturedIndex))"
                                  Appearance="@PageButtonAppearance(capturedIndex)"
                                  aria-current="@AriaCurrentValue(capturedIndex)"
                                  aria-label="@AriaLabel(capturedIndex + 1)">
                        @(capturedIndex + 1)
                    </MudButton >
                }
            }
        </div>

    }


</FluentStack>

@if (debug)
{

}

 *@


@code {
    // bool debug = true;
    // int pages => ProjectList.Items.Count >= MaxNumberOfPages ? MaxNumberOfPages : ProjectList.Items.Count;
    // int MaxNumberOfPages = 20;
    // PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    // private async Task GoToPageAsync(int pageIndex)
    // {
    //     await pagination.SetCurrentPageIndexAsync(pageIndex);
    // }

    // private Appearance PageButtonAppearance(int pageIndex)
    //     => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    // private string? AriaCurrentValue(int pageIndex)
    //     => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    // private string AriaLabel(int pageIndex)
    //     => $"Go to page {pageIndex}";

    // private void HandleNameFilter(ChangeEventArgs args)
    // {
    //     if (args.Value is string value)
    //     {
    //         nameFilter = value;
    //     }
    // }

    // private void HandleClear()
    // {
    //     if (string.IsNullOrWhiteSpace(nameFilter))
    //     {
    //         nameFilter = string.Empty;
    //     }
    // }



}


