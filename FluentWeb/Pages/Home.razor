@page "/"
@using FluentWeb.Pages.BusinessCases
@using Shared.Models.Projects.Request

<PageTitle>Home</PageTitle>
<FluentStack Orientation="Orientation.Vertical" Style="width:100%">
    <FluentStack Orientation=" Orientation.Horizontal">
        <div>
            <FluentButton Id="createproject" IconEnd="@(new Icons.Regular.Size32.Add())" OnClick="AddNew">

            </FluentButton>
            <FluentTooltip Anchor="createproject" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Create Project</FluentTooltip>
            <FluentButton IconEnd="@(new Icons.Regular.Size32.DocumentData())">

            </FluentButton>
            <FluentButton IconEnd="@(new Icons.Regular.Size32.DocumentPdf())">

            </FluentButton>
        </div>
        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
        Placeholder="Search..." />
    </FluentStack>
    @if (CreateResponse != null)
    {
        <CreateTemplate @ref=CreateForm TItem="CreateProjectRequest" @bind-Model="@CreateResponse"
                        Cancel="CancelAsync" GetAll="UpdateAll" Title="Create Project">
            <Content>
                <TextArea Label="Name"
                          @bind-Value=@CreateResponse.Name
                          Placeholder="Define name"
                          Validate="CreateForm.ValidateAsync"></TextArea>
                <ValidationMessage For="() => CreateResponse.Name" style="color:red; font-size:x-small;" />

            </Content>

        </CreateTemplate>

    }

    <FluentAccordion Style="width:100%" ExpandMode="AccordionExpandMode.Multi">
        @foreach (var row in FilteredItems)
        {
            @if (EditResponse != null && EditResponse.Id == row.Id)
            {
                <EditTemplate @ref=EditForm TItem="UpdateProjectRequest" @bind-Model=@EditResponse Cancel="CancelAsync"
                GetAll="UpdateAll" Title="Edit Project">
                    <Content>

                        <TextArea Label="Name"
                        @bind-Value=@EditResponse.Name
                        Placeholder="Define name"
                        Validate="EditForm.ValidateAsync"></TextArea>
                        <ValidationMessage For="() => EditResponse.Name" style="color:red; font-size:x-small;" />
                    </Content>

                </EditTemplate>

            }
            else
            {
                <FluentAccordionItem>
                    <HeadingTemplate>
                        <FluentStack Orientation=" Orientation.Horizontal">
                            <FluentLabel Typo="Typography.H4" Style="overflow-wrap: break-word;">@row.Name</FluentLabel>
                            <FluentSpacer />
                            <div>
                                <FluentButton Id="editproject" IconEnd="@(new Icons.Regular.Size32.Edit())" OnClick="@(()=>Edit(row))">

                                </FluentButton>
                                <FluentTooltip Anchor="editproject" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
                                <FluentButton Id="deleteproject" IconEnd="@(new Icons.Regular.Size32.Delete())" OnClick="@(()=>Delete(row))">

                                </FluentButton>
                                <FluentTooltip Anchor="deleteproject" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>
                            </div>
                        </FluentStack>

                    </HeadingTemplate>
                    <ChildContent>
                        <BussinesCaseList Cancel="CancelAsync" GetAll="UpdateAll" Parent="@row">

                        </BussinesCaseList>
                    </ChildContent>
                </FluentAccordionItem>
            }

        }

    </FluentAccordion>


</FluentStack>

@code {
    EditTemplate<UpdateProjectRequest> EditForm = null!;
    CreateTemplate<CreateProjectRequest> CreateForm = null!;
}