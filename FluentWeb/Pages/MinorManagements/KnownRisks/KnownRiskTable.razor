@page "/KnownRisks/{ProjectId:guid}"
@using Shared.Models.KnownRisks.Responses
<FluentCard Width="100%">
    <FluentStack Orientation="Orientation.Vertical" Width="100%" HorizontalAlignment="HorizontalAlignment.Start" VerticalAlignment="VerticalAlignment.Top">
        <FluentLabel Typo="Typography.Header"><strong>Known risk</strong></FluentLabel>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">

            <IconButton IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@AddNew" ToolTip="Add New" Disabled="@(CreateRow!=null)"></IconButton>

            <IconButton IconEnd="@(new Icons.Regular.Size20.ArrowUp())" OnClick="@Up" Disabled="@DisableUpButton" ToolTip="Up"></IconButton>
            <IconButton IconEnd="@(new Icons.Regular.Size20.ArrowDown())" OnClick="@Down" Disabled="@DisableDownButton" ToolTip="Down"></IconButton>

            <FluentSpacer />
            <FluentLabel Typo="Typography.Body">Selected: @CurrentRowName</FluentLabel>
            <FluentSearch type="search" Autofocus=true @bind-Value=@nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Name..." />

        </FluentStack>
        <FluentDataGrid id="defaultGrid"
                        Items=FilteredItems.AsQueryable()
                        TGridItem=KnownRiskResponse
                        OnRowClick="HandleRowClick"
                        OnRowDoubleClick="HandleRowDoubleClick"
                        AutoFit="true"
                        Pagination="@pagination"
                        DisplayMode="DataGridDisplayMode.Table"
                        MultiLine="true"
                        RowSize="@DataGridRowSize.Medium" Style="width:100%">


            <TemplateColumn Title="Name">
                @if (context == CreateRow || EditRow == context)
                {
                    <FluentTextArea Spellcheck="true"
                                    Resize="TextAreaResize.Vertical"
                                    Rows="5"
                                    @bind-Value=@context.Name
                                    Immediate="true"
                                    Style="width: 100%;" />


                }
                else
                {
                    @context.Name



                }

            </TemplateColumn>
            <TemplateColumn Width="20%">
                @if (CreateRow == context)
                {
                    <FluentStack Orientation="Orientation.Horizontal">
                        <IconButton IconEnd="@(new Icons.Regular.Size20.Save())" OnClick="@Create" ToolTip="Save" Disabled="@DisableSaveButton(context)"></IconButton>
                        <IconButton IconEnd="@(new Icons.Regular.Size20.CalendarCancel())" OnClick="@CancelCreate" ToolTip="Cancel"></IconButton>
                    </FluentStack>

                }
                else if (EditRow == context)
                {
                    <FluentStack Orientation="Orientation.Horizontal">
                        <IconButton IconEnd="@(new Icons.Regular.Size20.Save())" OnClick="@(()=>Update(context))" ToolTip="Save" Disabled="@DisableSaveButton(context)"></IconButton>
                        <IconButton IconEnd="@(new Icons.Regular.Size20.CalendarCancel())" OnClick="@CancelEdit" ToolTip="Cancel"></IconButton>
                    </FluentStack>
                }
                else
                {
                    <IconButton IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(context))" ToolTip="Delete"></IconButton>
                    <IconButton IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(context))" ToolTip="Delete"></IconButton>
                }

            </TemplateColumn>

        </FluentDataGrid>
        @if (pages == MaxNumberOfPages)
        {
            <div class="page-buttons">
                Page:
                @if (pagination.TotalItemCount.HasValue)
                {
                    for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                    {
                        var capturedIndex = pageIndex;
                        <FluentButton @onclick="@(() => GoToPageAsync(capturedIndex))"
                                      Appearance="@PageButtonAppearance(capturedIndex)"
                                      aria-current="@AriaCurrentValue(capturedIndex)"
                                      aria-label="@AriaLabel(capturedIndex + 1)">
                            @(capturedIndex + 1)
                        </FluentButton>
                    }
                }
            </div>

        }
    </FluentStack>
</FluentCard>


@code {
    int MaxNumberOfPages = 40;
    int pages => Items.Count >= MaxNumberOfPages ? MaxNumberOfPages : Items.Count;
    PaginationState pagination = new PaginationState { ItemsPerPage = 40 };
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private Appearance PageButtonAppearance(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private string AriaLabel(int pageIndex)
        => $"Go to page {pageIndex}";
    
    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }
   
}
