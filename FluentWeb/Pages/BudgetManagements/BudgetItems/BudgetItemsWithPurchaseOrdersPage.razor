@page "/BudgetItemsWithPurchaseOrders/{ProjectId:guid}"

<FluentStack Orientation="Orientation.Vertical" Width="100%" HorizontalAlignment="HorizontalAlignment.Start" VerticalAlignment="VerticalAlignment.Top">
    <FluentLabel Typo="Typography.Subject"><strong>@Title</strong></FluentLabel>
    <div>
        <FluentGrid AdaptiveRendering=true Justify="JustifyContent.FlexStart">
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Capital, $USD: </strong>@Response.sTotalCapital</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Actual, $USD: </strong>@Response.sCapitalActualUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Commitment, $USD: </strong>@Response.sCapitalCommitemntUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Potential, $USD: </strong>@Response.sCapitalPotentialUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Assigned, $USD: </strong>@Response.sCapitalAssignedUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>To Commit, $USD: </strong>@Response.sCapitalToCommitUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Expenses, $USD: </strong>@Response.sTotalExpenses</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Actual, $USD: </strong>@Response.sExpensesActualUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Commitment, $USD: </strong>@Response.sExpensesCommitemntUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Potential, $USD: </strong>@Response.sExpensesPotentialUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>Assigned, $USD: </strong>@Response.sExpensesAssignedUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body"><strong>To Commit, $USD: </strong>@Response.sExpensesToCommitUSD</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="3">
                <FluentLabel Typo="Typography.Body"><strong>Appropiation, $USD: </strong>@Response.sTotalBudget</FluentLabel>
            </FluentGridItem>
       

        </FluentGrid>
    </div>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">

        <!-- Botón "Go Back" -->
        <IconButton IconEnd="@(new Icons.Regular.Size20.ArrowStepBack())" OnClick="@Navigation.NavigateBack" ToolTip="Go Back"></IconButton>


        <FluentSpacer />

        <FluentSearch type="search" Autofocus=true @bind-Value=@nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Name..." />

    </FluentStack>
    @if (Response.Items.Count > 0)
    {
        <FluentDataGrid id="defaultGrid"
                        Items=@Response.Items.AsQueryable()
                        TGridItem=IBudgetItemWithPurchaseOrderResponse
                        AutoFit="true"
                        Pagination="@pagination"
                        DisplayMode="DataGridDisplayMode.Table"
                        MultiLine="true"
                        RowSize="@DataGridRowSize.Medium" Style="width:100%">

            <PropertyColumn Property="@(p => p.Nomenclatore)" Width="10%" Title="#" />

            <PropertyColumn Property="@(p => p.Name)" Width="45%" Title="Name" />
            <PropertyColumn Property="@(p => p.sBudgetUSD)" Width="15%" Title="Budget, $USD" />
            <PropertyColumn Property="@(p => p.sAssignedUSD)" Width="15%" Title="Assigned, $USD" />
            <PropertyColumn Property="@(p => p.sToCommitUSD)" Width="15%" Title="To Commit, $USD" />
            <PropertyColumn Property="@(p => p.sActualUSD)" Width="15%" Title="Actual, $USD" />
            <PropertyColumn Property="@(p => p.sCommitmentUSD)" Width="15%" Title="Commitment, $USD" />
            <PropertyColumn Property="@(p => p.sPotentialUSD)" Width="15%" Title="Potential, $USD" />
            <TemplateColumn Width="15%">
                <IconButton IconEnd="@(new Icons.Regular.Size20.AddCircle())" OnClick="@(() => AddPurchaseOrder(context))" ToolTip="Add Purchase Order"></IconButton>
                @* <IconButton IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => Delete(context))" ToolTip="Delete"></IconButton> *@

            </TemplateColumn>

        </FluentDataGrid>
        @if (pages == MaxNumberOfPages)
        {
            <div class="page-buttons">
                Page:
                @if (pagination.TotalItemCount.HasValue)
                {
                    for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                    {
                        var capturedIndex = pageIndex;
                        <FluentButton @onclick="@(() => GoToPageAsync(capturedIndex))"
                                      Appearance="@PageButtonAppearance(capturedIndex)"
                                      aria-current="@AriaCurrentValue(capturedIndex)"
                                      aria-label="@AriaLabel(capturedIndex + 1)">
                            @(capturedIndex + 1)
                        </FluentButton>
                    }
                }
            </div>

        }
    }
    else
    {
        @("No items to Show")
    }


</FluentStack>



@code {

    string Title => $"Budget items for {Response.ProjectName}";

    int MaxNumberOfPages = 40;
    int pages => Response.Items.Count >= MaxNumberOfPages ? MaxNumberOfPages : Response.Items.Count;
    PaginationState pagination = new PaginationState { ItemsPerPage = 40 };
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private Appearance PageButtonAppearance(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    private string? AriaCurrentValue(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private string AriaLabel(int pageIndex)
        => $"Go to page {pageIndex}";

    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }
}