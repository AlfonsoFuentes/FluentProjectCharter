@page "/UpdatePipeTemplate/{Id:guid}"
@using Shared.Models.Templates.Pipings.Requests

<EditTemplate @ref=Form TItem="UpdatePipeTemplateRequest" @bind-Model="@Model"
              Title="Edit Pipe Template">
    <Content>
        <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 2px;width:100%; ">
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px;width:100%; ">
                    <FluentGridItem xs="12">
                        <FluentSelect TOption="NominalDiameterEnum"
                                      Label="Select Diameter"
                                      Items="@NominalDiameterEnum.List"
                                      Id="people-listbox"
                                      Width="100%"
                                      Height="350px"
                                      @onchange=@ChangeDiameter
                                      Placeholder="Make a selection..."
                                      OptionValue="@(p => p.Name)"
                                      OptionText="@(p => p.Name)"
                                      @bind-Value="@Model.Diameter.Name"
                                      @bind-SelectedOption="@Model.Diameter" />
                        <ValidationMessage For="() => Model.Diameter" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentSelect TOption="MaterialEnum"
                                      Label="Select Material"
                                      Items="@MaterialEnum.List"
                                      Id="people-listbox"
                                      Width="100%"
                                      Height="350px"
                                      @onchange=@ChangeMaterial
                                      Placeholder="Make a selection..."
                                      OptionValue="@(p => p.Name)"
                                      OptionText="@(p => p.Name)"
                                      @bind-Value="@Model.Material.Name"
                                      @bind-SelectedOption="@Model.Material" />
                        <ValidationMessage For="() => Model.Material" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentSelect TOption="PipeClassEnum"
                                      Label="Select Pipe class"
                                      Items="@PipeClassEnum.List"
                                      Id="people-listbox"
                                      Width="100%"
                                      Height="350px"
                                      @onchange=@ChangePipeClass
                                      Placeholder="Make a selection..."
                                      OptionValue="@(p => p.Name)"
                                      OptionText="@(p => p.Name)"
                                      @bind-Value="@Model.Class.Name"
                                      @bind-SelectedOption="@Model.Class" />
                        <ValidationMessage For="() => Model.Class" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentSwitch @bind-Value=@Model.Insulation Label="Is Insulated?"></FluentSwitch>
                    </FluentGridItem>


                </FluentGrid>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px;width:100%; ">

                    <FluentGridItem xs="12">
                        <FluentSelect TOption="BrandResponse"
                                      Label="Select a Brand"
                                      Items="@BrandsResponseList.Items"
                                      Id="people-listbox"
                                      Width="90%"
                                      Height="auto"
                                      Immediate="true"
                                      @onchange=@ChangeSelect
                                      Placeholder="Make a selection..."
                                      OptionValue="@(p => p.Name)"
                                      OptionText="@(p => p.Name)"
                                      @bind-Value="@SelectedBrand"
                                      @bind-SelectedOption="@Model.BrandResponse" />
                        <ValidationMessage For="() => Model.BrandResponse" style="color:red; font-size:x-small;" />

                        <FluentButton Id="addB" OnClick="@(()=>AddBrand())" IconEnd="@(new Icons.Regular.Size20.Add())"></FluentButton>
                        <FluentTooltip Anchor="addB" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Brand</FluentTooltip>

                    </FluentGridItem>
                    <FluentGridItem xs="12">

                        <NumberField @bind-Value="@Model.LaborDayPrice" Label="Unitary cost $USD/day, USD" Validate="Form.ValidateAsync">

                        </NumberField>
                        <ValidationMessage For="() => Model.LaborDayPrice" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <NumberField @bind-Value="@Model.EquivalentLenghPrice" Label="Unitary cost $USD/mt equivalent, USD" Validate="Form.ValidateAsync">

                        </NumberField>
                        <ValidationMessage For="() => Model.EquivalentLenghPrice" style="color:red; font-size:x-small;" />
                    </FluentGridItem>

                </FluentGrid>




            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px;width:100%; ">
                    <FluentGridItem xs="12">

                    </FluentGridItem>
                    <FluentGridItem xs="12">



                    </FluentGridItem>
                    <FluentGridItem xs="12">
                       
                    </FluentGridItem>
                </FluentGrid>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="12">

            </FluentGridItem>

        </FluentGrid>

    </Content>

</EditTemplate>

@code {
    EditTemplate<UpdatePipeTemplateRequest> Form = null!;
    int Spacing = 1;
    JustifyContent Justification = JustifyContent.FlexStart;

    void OnBreakpointEnterHandler(GridItemSize size)
    {

    }
    string? SelectedBrand;
    async Task ChangeSelect(ChangeEventArgs args)
    {
        if (args == null || args.Value == null) return;
        if (BrandsResponseList.Items.Any(x => x.Name == args.Value.ToString()))
        {
            Model.BrandResponse = BrandsResponseList.Items.Single(x => x.Name == args.Value.ToString());
            SelectedBrand = Model.Brand;
            await Form.ValidateAsync();
        }

    }
    async Task ChangeMaterial(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.Material = MaterialEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
    async Task ChangeDiameter(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.Diameter = NominalDiameterEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
    async Task ChangePipeClass(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.Class = PipeClassEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
}

