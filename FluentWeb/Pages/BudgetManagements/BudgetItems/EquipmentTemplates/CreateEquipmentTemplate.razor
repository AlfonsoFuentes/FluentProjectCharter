@page "/CreateEquipmentTemplate"



<CreateTemplate @ref=Form TItem="CreateEquipmentTemplateRequest" @bind-Model="@Model"
                Title="Create Equipment Template">
    <Content>
        <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 2px;width:100%; ">
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px;width:100%; ">
                    <FluentGridItem xs="12">
                        <TextBox Label="Tag Letter"
                                 @bind-Value=@Model.TagLetter
                                 Placeholder="Define Tag Letter"
                                 Validate="Form.ValidateAsync"></TextBox>
                        <ValidationMessage For="() => Model.TagLetter" style="color:red; font-size:x-small;" />
                        <ValidationMessage For="() => Model.Name" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <TextBox Label="Type"
                                 @bind-Value=@Model.Type
                                 Placeholder="Define type"
                                 Validate="Form.ValidateAsync"></TextBox>
                        <ValidationMessage For="() => Model.Type" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <TextBox Label="Sub Type"
                                 @bind-Value=@Model.SubType
                                 Placeholder="Define Sub type"
                                 Validate="Form.ValidateAsync"></TextBox>
                        <ValidationMessage For="() => Model.SubType" style="color:red; font-size:x-small;" />
                    </FluentGridItem>



                </FluentGrid>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px;width:100%; ">

                    <FluentGridItem xs="12">
                        <FluentSelect TOption="BrandResponse"
                                      Label="Select a Brand"
                                      Items="@BrandsResponseList.Items"
                                      Id="people-listbox"
                                      Width="90%"
                                      Height="auto"
                                      Immediate="true"
                                      @onchange=@ChangeSelect
                                      Placeholder="Make a selection..."
                                      OptionValue="@(p => p.Name)"
                                      OptionText="@(p => p.Name)"
                                      @bind-Value="@SelectedBrand"
                                      @bind-SelectedOption="@Model.BrandResponse" />
                        <ValidationMessage For="() => Model.BrandResponse" style="color:red; font-size:x-small;" />

                        <FluentButton Id="addB" OnClick="@(()=>AddBrand())" IconEnd="@(new Icons.Regular.Size20.Add())"></FluentButton>
                        <FluentTooltip Anchor="addB" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Brand</FluentTooltip>

                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <TextBox Label="Model"
                                 @bind-Value=@Model.Model
                                 Placeholder="Define Model"
                                 Validate="Form.ValidateAsync"></TextBox>
                        <ValidationMessage For="() => Model.Model" style="color:red; font-size:x-small;" />

                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <TextBox Label="Reference"
                                 @bind-Value=@Model.Reference
                                 Placeholder="Define Reference"
                                 Validate="Form.ValidateAsync"></TextBox>
                    </FluentGridItem>

                </FluentGrid>




            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px;width:100%; ">
                    <FluentGridItem xs="12">
                        <FluentSelect TOption="MaterialEnum"
                                      Label="Select Internal Material"
                                      Items="@MaterialEnum.List"
                                      Id="people-listbox"
                                      Width="100%"
                                      Height="350px"
                                      @onchange=@ChangeInternalMaterial
                                      Placeholder="Make a selection..."
                                      OptionValue="@(p => p.Name)"
                                      OptionText="@(p => p.Name)"
                                      @bind-Value="@Model.InternalMaterial.Name"
                                      @bind-SelectedOption="@Model.InternalMaterial" />
                        <ValidationMessage For="() => Model.InternalMaterial" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                    <FluentGridItem xs="12">

                        <FluentSelect TOption="MaterialEnum"
                                      Label="Select External Material"
                                      Items="@MaterialEnum.List"
                                      Id="people-listbox"
                                      Width="100%"
                                      Height="350px"
                                      @onchange=@ChangeExternalMaterial
                                      Placeholder="Make a selection..."
                                      OptionValue="@(p => p.Name)"
                                      OptionText="@(p => p.Name)"
                                      @bind-Value="@Model.ExternalMaterial.Name"
                                      @bind-SelectedOption="@Model.ExternalMaterial" />
                        <ValidationMessage For="() => Model.ExternalMaterial" style="color:red; font-size:x-small;" />

                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <NumberField @bind-Value="@Model.Value" Label="Value, USD" Validate="Form.ValidateAsync">

                        </NumberField>
                        <ValidationMessage For="() => Model.Value" style="color:red; font-size:x-small;" />
                    </FluentGridItem>
                </FluentGrid>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="12">
                <NozzleTemplateList @bind-Items=@Model.Nozzles Validate="Form.ValidateAsync"></NozzleTemplateList>
                <ValidationMessage For="() => Model.Nozzles" style="color:red; font-size:x-small;" />
            </FluentGridItem>

        </FluentGrid>

    </Content>

</CreateTemplate>

@code {
    CreateTemplate<CreateEquipmentTemplateRequest> Form = null!;
    int Spacing = 1;
    JustifyContent Justification = JustifyContent.SpaceBetween;

    void OnBreakpointEnterHandler(GridItemSize size)
    {

    }
    string? SelectedBrand;
    async Task ChangeSelect(ChangeEventArgs args)
    {
        if (args == null || args.Value == null) return;
        if (BrandsResponseList.Items.Any(x => x.Name == args.Value.ToString()))
        {
            Model.BrandResponse = BrandsResponseList.Items.Single(x => x.Name == args.Value.ToString());
            SelectedBrand = Model.Brand;
            await Form.ValidateAsync();
        }

    }
    async Task ChangeInternalMaterial(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.InternalMaterial = MaterialEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
    async Task ChangeExternalMaterial(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.ExternalMaterial = MaterialEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
}

