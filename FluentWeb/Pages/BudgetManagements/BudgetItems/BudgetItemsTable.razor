@page "/BudgetItems/{ProjectId:guid}"
<FluentCard Width="100%">

    <FluentStack Orientation="Orientation.Vertical" Width="100%" HorizontalAlignment="HorizontalAlignment.Start" VerticalAlignment="VerticalAlignment.Top">
        <FluentLabel Typo="Typography.Header"><strong>@($"Budget Items")</strong></FluentLabel>

        <div>
            <FluentGrid AdaptiveRendering=true Justify="JustifyContent.FlexStart">
                <FluentGridItem xs="12" sm="3">
                    <FluentLabel Typo="Typography.Body"><strong>Capital, $USD: </strong>@Response.sTotalCapital</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="3">
                    <FluentLabel Typo="Typography.Body"><strong>Expenses, $USD: </strong>@Response.sTotalExpenses</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="3">
                    <FluentLabel Typo="Typography.Body"><strong>Engineering @($"({Response.PercentageEngineering}%)"), $USD: </strong>@Response.sEngineeringBudget</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="3">
                    <FluentLabel Typo="Typography.Body"><strong>Contingency @($"({Response.PercentageContingency}%)"), $USD: </strong>@Response.sContingenyBudget</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6">
                    <FluentLabel Typo="Typography.H4"><strong>Appropiation, $USD: </strong>@Response.sTotalBudget</FluentLabel>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6"></FluentGridItem>
            </FluentGrid>
        </div>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">

            <!-- Botón "Go Back" -->
            <IconButton IconEnd="@(new Icons.Regular.Size20.ArrowStepBack())" OnClick="@Navigation.NavigateBack" ToolTip="Go Back"></IconButton>
            <IconButton IconEnd="@(new Icons.Regular.Size20.DeleteLines())" OnClick="@RemoveGroup" ToolTip="Delete Selecteds" Disabled="@(Selecteds.Count==0)"></IconButton>

            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Alterations.PageName.Create))" ToolTip="Add Alteration" Name="A"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Foundations.PageName.Create))" ToolTip="Add Foundation" Name="B"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Structurals.PageName.Create))" ToolTip="Add Structural" Name="C"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Equipments.PageName.Create))" ToolTip="Add Equipment" Name="D"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Valves.PageName.Create))" ToolTip="Add Valve" Name="V"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Electricals.PageName.Create))" ToolTip="Add Electrical" Name="E"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Pipes.PageName.Create))" ToolTip="Add Pipe" Name="F"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Instruments.PageName.Create))" ToolTip="Add Instrument" Name="G"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.EHSs.PageName.Create))" ToolTip="Add EHS" Name="H"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Paintings.PageName.Create))" ToolTip="Add Painting" Name="G"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Taxs.PageName.Create))" ToolTip="Add Tax" Name="K"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.Testings.PageName.Create))" ToolTip="Add Testing" Name="M"></TextButton>
            <TextButton OnClick="@(()=>AddNewBudgetItem(StaticClass.EngineeringDesigns.PageName.Create))" ToolTip="Add EngineeringDesign" Name="O"></TextButton>


            <FluentSpacer />

            <FluentSearch type="search" Autofocus=true @bind-Value=@nameFilter @oninput="HandleNameFilter" @bind-Value:after="HandleClear" Placeholder="Name..." />

        </FluentStack>
        @if (Response.Items.Count > 0)
        {
            <FluentDataGrid id="defaultGrid"
                            Items=@Response.Items.AsQueryable()
                            TGridItem=IBudgetItemResponse
                            AutoFit="true"
                            Pagination="@pagination"
                            DisplayMode="DataGridDisplayMode.Table"
                            MultiLine="true"
                            RowSize="@DataGridRowSize.Medium" Style="width:100%">

                <TemplateColumn Width="5%">
                    <FluentCheckbox @bind-Value=@context.Selected></FluentCheckbox>
                </TemplateColumn>
                <PropertyColumn Property="@(p => p.Nomenclatore)" Width="10%" Title="#" />
                <PropertyColumn Property="@(p => p.Tag)" Width="10%" Title="Tag" />
                <PropertyColumn Property="@(p => p.Name)" Width="45%" Title="Name" />
                <PropertyColumn Property="@(p => p.sBudgetUSD)" Width="15%" Title="Budget, $USD" />

                <TemplateColumn Width="15%">
                    <IconButton IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(() => EditBudgetItem(context))" ToolTip="Edit"></IconButton>
                    <IconButton IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(() => Delete(context))" ToolTip="Delete"></IconButton>

                </TemplateColumn>

            </FluentDataGrid>
            @if (pages == MaxNumberOfPages)
            {
                <div class="page-buttons">
                    Page:
                    @if (pagination.TotalItemCount.HasValue)
                    {
                        for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                        {
                            var capturedIndex = pageIndex;
                            <FluentButton @onclick="@(() => GoToPageAsync(capturedIndex))"
                                          Appearance="@PageButtonAppearance(capturedIndex)"
                                          aria-current="@AriaCurrentValue(capturedIndex)"
                                          aria-label="@AriaLabel(capturedIndex + 1)">
                                @(capturedIndex + 1)
                            </FluentButton>
                        }
                    }
                </div>

            }
        }
        else
        {
            @("No items to Show")
        }


    </FluentStack>

</FluentCard>

@code {

    string Title => $"Budget items for {Response.ProjectName}";

    int pages => Response.Items.Count >= MaxNumberOfPages ? MaxNumberOfPages : Response.Items.Count;
    int MaxNumberOfPages = 40;
    PaginationState pagination = new PaginationState { ItemsPerPage = 40 };
    private async Task GoToPageAsync(int pageIndex)
    {
        await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    private Appearance PageButtonAppearance(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    private string? AriaCurrentValue(int pageIndex)
    => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    private string AriaLabel(int pageIndex)
    => $"Go to page {pageIndex}";

    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }
    }
