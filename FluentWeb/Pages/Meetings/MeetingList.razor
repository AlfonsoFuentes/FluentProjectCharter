<TemplatedList T="MeetingResponse" FilteredItems="@FilteredItems" Title="@($"Manage {Title}")" Context="context">
    <MenuButtons>
        <FluentButton Id="addmeeting" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="AddNew">

        </FluentButton>
        <FluentTooltip Anchor="addmeeting" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>@($"Add {Title}")"</FluentTooltip>

        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
                      @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())" Placeholder="Search..." />
    </MenuButtons>
    <Content>
        <FluentGrid AdaptiveRendering="true" Style="width:100%" Justify="JustifyContent.FlexStart">
            <FluentGridItem xs="12" sm="7">
                <FluentLabel Typo="Typography.Body" Style="overflow-wrap: break-word; padding:2px;">@context.Name</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="2">
                <FluentLabel Typo="Typography.Body">@context.MeetingType</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="3">
                <FluentLabel Typo="Typography.Body">@context.sDateOfMeeting</FluentLabel>
            </FluentGridItem>

        </FluentGrid>


    </Content>
    <Buttons>
        <FluentButton Id="@($"edit{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="@(()=>Edit(context))"></FluentButton>
        <FluentTooltip Anchor="@($"edit{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
       
        <FluentButton Id="@($"delete{context.Id}")" IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="@(()=>Delete(context))"></FluentButton>
        <FluentTooltip Anchor="@($"delete{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>
        

        <FluentButton Id="@($"Show{context.Id}")" IconEnd="@(new Icons.Regular.Size20.ArrowBidirectionalUpDown())" OnClick="@(()=>Show(context))"></FluentButton>
        <FluentTooltip Anchor="@($"Show{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Show</FluentTooltip>
    </Buttons>
    <ContentNode>
        <MeetinTabs GetAll="GetAll" Parent="context"></MeetinTabs>
    </ContentNode>

</TemplatedList>



@code {
    string Title = "Meeting";
    public async Task Show(MeetingResponse response)
    {
        if (App.ProjectList.CurrentProject == null) return;
        if (App.ProjectList.CurrentProject.CurrentMeeting == null)
        {
            App.ProjectList.CurrentProject.CurrentMeeting = response;
            response.Open();
            await GenericService.UpdateState(response);

        }
        else if (App.ProjectList.CurrentProject.CurrentMeeting.Id == response.Id)
        {
            response.Close();
            App.ProjectList.CurrentProject.CurrentMeeting = null!;
            await GenericService.UpdateState(response);
        }
        else
        {
            App.ProjectList.CurrentProject.CurrentMeeting.Close();
            await GenericService.UpdateState(App.ProjectList.CurrentProject.CurrentMeeting);
            App.ProjectList.CurrentProject.CurrentMeeting = response;

            response.Open();
            await GenericService.UpdateState(response);
        }
        StateHasChanged();

    }
    private async Task HandleOnTabChange(FluentTab tab)
    {
        if (App.ProjectList.CurrentProject == null) return;
        if (App.ProjectList.CurrentProject.CurrentMeeting != null)
        {
            App.ProjectList.CurrentProject.CurrentMeeting.Tab = tab.Id;
            await GenericService.UpdateState(App.ProjectList.CurrentProject.CurrentMeeting);
        }

        StateHasChanged();
    }
}
