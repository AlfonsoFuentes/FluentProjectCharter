@page "/UpdateMeeting/{Id:guid}/{ProjectId:guid}"

<EditTemplate @ref=Form TItem="UpdateMeetingRequest" @bind-Model=@Model 
              Title="Edit Meeting">
    <Content>
   @*      <TextArea Label="Name"
                  @bind-Value=@Model.Name
                  Placeholder="Define name"
                  Validate="Form.ValidateAsync"></TextArea>
        <ValidationMessage For="() => Model.Name" style="color:red; font-size:x-small;" />

        <TextArea Label="Meeting Subject"
                  @bind-Value=@Model.Subject
                  Placeholder="Define name"
                  Validate="Form.ValidateAsync"></TextArea>
        <ValidationMessage For="() => Model.Subject" style="color:red; font-size:x-small;" />
        <FluentSelect TOption="MeetingTypeEnum"
                      Label="Select Project Need"
                      Items="@MeetingTypeEnum.List"
                      Id="people-listbox"
                      Width="60%"
                      Height="350px"
                      @onchange=@ChangeSelectMeetingType
                      Placeholder="Make a selection..."
                      OptionValue="@(p => p.Name)"
                      OptionText="@(p => p.Name)"
                      @bind-Value="@Model.MeetingType.Name"
                      @bind-SelectedOption="@Model.MeetingType" />


        <ValidationMessage For="() => Model.MeetingType" style="color:red; font-size:x-small;" />

        <FluentDatePicker Label="Meeting Date" AriaLabel="To" @bind-Value="@Model.DateofMeeting" DoubleClickToDate="@Model.DateofMeeting" />
        <ValidationMessage For="() => Model.DateofMeeting" style="color:red; font-size:x-small;" /> *@
    </Content>

</EditTemplate>

@code {
    EditTemplate<UpdateMeetingRequest> Form = null!;
    async Task ChangeSelectMeetingType(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.MeetingType = MeetingTypeEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
}
