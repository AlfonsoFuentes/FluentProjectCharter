@page "/templates/valve-templates"


<FluentStack Orientation="Orientation.Vertical" Style="width:100%;border:1px solid lightgray;border-radius:5px; padding:4px;">
    <FluentLabel Typo="Typography.Subject" Style="overflow-wrap: break-word;"><strong>Manage Valve Templates</strong></FluentLabel>

    <FluentStack Orientation=" Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="6">

        @if (!ByParameter)
        {
            <FluentButton Id="addA" OnClick="@(()=>AddNew())" IconEnd="@(new Icons.Regular.Size20.Add())"></FluentButton>
            <FluentTooltip Anchor="addA" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Valve Template</FluentTooltip>


        }

        <FluentSpacer />
        <FluentSearch @bind-Value="@nameFilter"
                      @oninput="@((arg)=>nameFilter=arg.Value==null?string.Empty:arg.Value!.ToString())"
                      Placeholder="Search..." />
    </FluentStack>
    <FluentDataGrid Items="@FilteredItems.AsQueryable()"
                    Virtualize="true"
                    ItemSize="46"
                    Style="width:100%"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    TGridItem="ValveTemplateResponse">
        <PropertyColumn Title="Type" Property="@(c => c.Type.Name)" />
        <PropertyColumn Title="Brand" Property="@(c => c.Brand)" />
        @if (!ByParameter)
        {
            <PropertyColumn Title="Model" Property="@(c => c.Model)" />
        }
        <PropertyColumn Title="Diameter, in" Property="@(c => c.Diameter.Name)" />
        <PropertyColumn Title="Actuator" Property="@(c => c.ActuatorType.Name)" />
        @if (!ByParameter)
        {
            <PropertyColumn Title="Material" Property="@(c => c.Material.Name)" />
            <PropertyColumn Title="Positioner" Property="@(c => c.PositionerType.Name)" />
            <PropertyColumn Title="Signal" Property="@(c => c.SignalType.Name)" />
            <PropertyColumn Title="Fail type" Property="@(c => c.FailType.Name)" />
            <PropertyColumn Title="Has FeedBack?" Property="@(c => c.HasFeedBack)" />
            

        }
        <PropertyColumn Title="Value, USD" Property="@(c => c.sValue)" />

        <TemplateColumn Title="Actions" Align="@Align.Start" Width="15%">
            @if (!ByParameter)
            {
                <FluentButton Id="@($"edit{context.Id}")" aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => Edit(context))" />
                <FluentTooltip Anchor="@($"edit{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Edit</FluentTooltip>
                <FluentButton Id="@($"copy{context.Id}")" aria-label="Copy item" IconEnd="@(new Icons.Regular.Size16.Copy())" OnClick="@(() => Copy(context))" />
                <FluentTooltip Anchor="@($"copy{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Copy</FluentTooltip>
                <FluentButton Id="@($"delete{context.Id}")" aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Delete(context))" />
                <FluentTooltip Anchor="@($"delete{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Delete</FluentTooltip>
            }
            else
            {
                <FluentButton Id="@($"send{context.Id}")" aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.SendPerson())" OnClick="@(() => OnSendToForm(context))" />
                <FluentTooltip Anchor="@($"send{context.Id}")" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Send to form</FluentTooltip>
            }
        </TemplateColumn>
    </FluentDataGrid>



</FluentStack>

@code {

}
