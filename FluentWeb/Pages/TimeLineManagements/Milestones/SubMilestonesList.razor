@using Shared.Enums.TasksRelationTypeTypes
@foreach (var context in Items)
{
    <div style="width:100%" class="@(GetIsSelected(context) ? "selected-row" : "")">
        <FluentGridItem xs="12" sm="@OrderColumn" @onclick=@(()=>OnClick(context))>
            <FluentLabel Typo="Typography.Body">@context.Order</FluentLabel>
        </FluentGridItem>
        <FluentGridItem xs="12" sm="@NameColumn" @onclick=@(()=>OnClick(context))>
            <FluentTextField Value="@context.Name" ValueChanged="newValue => OnChangeName(context,newValue)"
                             Style="width:100%">
            </FluentTextField>

        </FluentGridItem>
        <FluentGridItem xs="12" sm="@StartDateColumn" @onclick=@(()=>OnClick(context))>
            <FluentDatePicker Value="@context.StartDate"
                              ValueChanged="newValue => OnChangeStartDate(context,newValue)" Style="width:100%">
            </FluentDatePicker>

        </FluentGridItem>
        <FluentGridItem xs="12" sm="@EndDateColumn" @onclick=@(()=>OnClick(context))>
            <FluentDatePicker Value="@context.EndDate"
                              ValueChanged="newValue => OnChangeEndDate(context,newValue)" Style="width:100%">
            </FluentDatePicker>


        </FluentGridItem>
        <FluentGridItem xs="12" sm="@DurationColumn" @onclick=@(()=>OnClick(context))>
            <FluentTextField Value="@context.DurationInput" ValueChanged="newValue => OnChangeDuration(context,newValue)"
                             Style="width:100%">
            </FluentTextField>

        </FluentGridItem>
        <FluentGridItem xs="12" sm="@RelatedColumn" @onclick=@(()=>OnClick(context))>
            <FluentSelect TOption="TasksRelationTypeEnum"
                          Items="@TasksRelationTypeEnum.List"
                          Style="margin-right: 10px;"
                          Id="people-listbox"
                          Width="100%"
                          Height="350px"
                          @onchange=@((args)=>OnChangeDependencyType(context,args))
                          Placeholder="Make a selection..."
                          OptionValue="@(p => p.Name)"
                          OptionText="@(p => p.Name)"
                          @bind-Value="@context.DependencyType.Name"
                          @bind-SelectedOption="@context.DependencyType" />
        </FluentGridItem>

    </div>
}
<style>
    .selected-row {
        background-color: #d3d3d3; /* Color de fondo para la fila seleccionada */
    }
</style>
@code {
    [Parameter]
    public int OrderColumn { get; set; }
    [Parameter]
    public int NameColumn { get; set; }
    [Parameter]
    public int StartDateColumn { get; set; }
    [Parameter]
    public int EndDateColumn { get; set; }
    [Parameter]
    public int DurationColumn { get; set; }
    [Parameter]
    public int RelatedColumn { get; set; }
    [Parameter]
    public int RelatedTypeColumn { get; set; }


    bool GetIsSelected(MilestoneResponse context)
    {
        return SelectedRow == null ? false : SelectedRow.Id == context.Id;
    }
    [Parameter]
    public MilestoneResponse? SelectedRow { get; set; }
}
