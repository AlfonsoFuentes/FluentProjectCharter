@using System.Globalization

<FluentCard>
    <h3>Gestión de Tareas con Subtareas y Dependencias</h3>

    <!-- Lista de tareas -->
    @foreach (var task in Tasks.Where(t => string.IsNullOrEmpty(t.ParentTaskName)))
    {
        <div style="margin-bottom: 20px; border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
            <h4>Tarea Principal: @task.Name</h4>

            <!-- Contenedor horizontal -->
            <div class="task-fields-container">
                <!-- Selector de fecha de inicio -->
                <FluentDatePicker Label="Fecha de inicio" Value="@task.StartDate"
                ValueChanged="newValue => UpdateStartDate(task, newValue)" Style="margin-right: 10px;">
                </FluentDatePicker>

                <!-- Selector de fecha final -->
                <FluentDatePicker Label="Fecha final" Value="@task.EndDate"
                ValueChanged="newValue => UpdateEndDate(task, newValue)" Style="margin-right: 10px;">
                </FluentDatePicker>

                <!-- Campo de duración -->
                <FluentTextField Value="@task.DurationInput" ValueChanged="newValue => UpdateDuration(task, newValue)"
                Label="Duración (1d = 1 día, 1w = 1 semana, 1m = 1 mes, 1y = 1 año)" Style="margin-right: 10px;">
                </FluentTextField>

                <!-- Selector de dependencia -->
                <FluentSelect TOption="string" Label="Depende de" Value="@task.DependencyName"
                ValueChanged="newValue => UpdateDependencyName(task, newValue)" Style="margin-right: 10px;">
                    <FluentOption Value="">Ninguna</FluentOption>
                    @foreach (var otherTask in Tasks.Where(t => t != task))
                    {
                        <FluentOption Value="@otherTask.Name">@otherTask.Name</FluentOption>
                    }
                </FluentSelect>

                <!-- Selector de tipo de dependencia -->
                <FluentSelect TOption="string" Label="Tipo de dependencia" Value="@task.DependencyType"
                ValueChanged="newValue => UpdateDependencyType(task, newValue)" Style="margin-right: 10px;">
                    <FluentOption Value="SS">Start-Start</FluentOption>
                    <FluentOption Value="SE">Start-End</FluentOption>
                    <FluentOption Value="ES">End-Start</FluentOption>
                    <FluentOption Value="EE">End-End</FluentOption>
                </FluentSelect>

                <!-- Botón para agregar subtarea -->
                <FluentButton @onclick="() => AddSubtask(task)">Agregar Subtarea</FluentButton>
            </div>

            <p>
                <strong>Resumen:</strong><br />
                Fecha de inicio: @(task.StartDate?.ToShortDateString() ?? "No definida")<br />
                Fecha final: @(task.EndDate?.ToShortDateString() ?? "No definida")<br />
                Duración: @task.Duration días<br />

                <!-- Mostrar tareas que dependen de esta tarea -->
                <strong>Tareas que dependen de esta:</strong><br />
                @if (GetDependentTasks(task).Any())
                {
                    foreach (var dependentTask in GetDependentTasks(task))
                    {
                        <span>@dependentTask.Name (@dependentTask.DependencyType)</span>

                        <br />
                    }
                }
                else
                {
                    <span>Ninguna</span>
                }
            </p>

            <!-- Subtareas -->
            @if (GetSubtasks(task).Any())
            {
                <div style="margin-left: 20px;">
                    <h5>Subtareas:</h5>
                    @foreach (var subtask in GetSubtasks(task))
                    {
                        <div style="margin-bottom: 10px; border: 1px solid #ddd; padding: 10px; border-radius: 5px;">
                            <h6>Subtarea: @subtask.Name</h6>

                            <div class="task-fields-container">
                                <!-- Selector de fecha de inicio -->
                                <FluentDatePicker Label="Fecha de inicio" Value="@subtask.StartDate"
                                ValueChanged="newValue => UpdateStartDate(subtask, newValue)" Style="margin-right: 10px;">
                                </FluentDatePicker>

                                <!-- Selector de fecha final -->
                                <FluentDatePicker Label="Fecha final" Value="@subtask.EndDate"
                                ValueChanged="newValue => UpdateEndDate(subtask, newValue)" Style="margin-right: 10px;">
                                </FluentDatePicker>

                                <!-- Campo de duración -->
                                <FluentTextField Value="@subtask.DurationInput" ValueChanged="newValue => UpdateDuration(subtask, newValue)"
                                Label="Duración (1d = 1 día, 1w = 1 semana, 1m = 1 mes, 1y = 1 año)" Style="margin-right: 10px;">
                                </FluentTextField>

                                <!-- Selector de dependencia -->
                                <FluentSelect TOption="string" Label="Depende de" Value="@subtask.DependencyName"
                                ValueChanged="newValue => UpdateDependencyName(subtask, newValue)" Style="margin-right: 10px;">
                                    <FluentOption Value="">Ninguna</FluentOption>
                                    @foreach (var otherTask in Tasks.Where(t => t != subtask))
                                    {
                                        <FluentOption Value="@otherTask.Name">@otherTask.Name</FluentOption>
                                    }
                                </FluentSelect>

                                <!-- Selector de tipo de dependencia -->
                                <FluentSelect TOption="string" Label="Tipo de dependencia" Value="@subtask.DependencyType"
                                ValueChanged="newValue => UpdateDependencyType(subtask, newValue)" Style="margin-right: 10px;">
                                    <FluentOption Value="SS">Start-Start</FluentOption>
                                    <FluentOption Value="SE">Start-End</FluentOption>
                                    <FluentOption Value="ES">End-Start</FluentOption>
                                    <FluentOption Value="EE">End-End</FluentOption>
                                </FluentSelect>
                            </div>

                            <p>
                                <strong>Resumen:</strong><br />
                                Fecha de inicio: @(subtask.StartDate?.ToShortDateString() ?? "No definida")<br />
                                Fecha final: @(subtask.EndDate?.ToShortDateString() ?? "No definida")<br />
                                Duración: @subtask.Duration días<br />
                            </p>
                        </div>
                    }
                </div>
            }
        </div>
    }

    <!-- Botón para agregar nueva tarea principal -->
    <FluentButton @onclick="AddTask">Agregar Tarea Principal</FluentButton>
</FluentCard>

<style>
    /* Estilo para organizar los campos horizontalmente */
    .task-fields-container {
    display: flex;
    flex-wrap: wrap; /* Permite que los elementos se ajusten en múltiples líneas si no caben */
    gap: 10px; /* Espacio entre los elementos */
    align-items: center; /* Alinea verticalmente los elementos */
    }

    /* Estilo para los selectores */
    .task-fields-container fluent-select {
    min-width: 150px; /* Ancho mínimo para los selectores */
    }

    /* Estilo para los campos de texto */
    .task-fields-container fluent-text-field {
    min-width: 200px; /* Ancho mínimo para los campos de texto */
    }

    /* Estilo para los selectores de fecha */
    .task-fields-container fluent-date-picker {
    min-width: 150px; /* Ancho mínimo para los selectores de fecha */
    }
</style>

@code {
    // Clase para representar una tarea
    public class Task
    {
        public string Name { get; set; } = string.Empty;
        public DateTime? StartDate { get; set; } = null; // Nullable
        public DateTime? EndDate { get; set; } = null;   // Nullable
        public int Duration { get; set; } = 1;
        public string ParentTaskName { get; set; } = ""; // Nombre de la tarea principal (si es una subtarea)
        public string DependencyName { get; set; } = ""; // Nombre de la tarea de la que depende
        public string DependencyType { get; set; } = ""; // Tipo de dependencia (SS, SE, ES, EE)

        // Propiedad para enlace bidireccional de la duración
        public string DurationInput
        {
            get => Duration.ToString();
            set
            {
                if (TryParseDuration(value, out var parsedDuration))
                {
                    Duration = parsedDuration;
                }
            }
        }

        // Métodos para actualizar valores relacionados
        public void UpdateEndDateAndDuration()
        {
            if (StartDate.HasValue && EndDate.HasValue)
            {
                Duration = (int)(EndDate.Value - StartDate.Value).TotalDays;
                if (Duration < 0)
                {
                    Duration = 0;
                    EndDate = StartDate;
                }
            }
        }

        public void UpdateStartDateAndDuration()
        {
            if (StartDate.HasValue && EndDate.HasValue)
            {
                Duration = (int)(EndDate.Value - StartDate.Value).TotalDays;
                if (Duration < 0)
                {
                    Duration = 0;
                    StartDate = EndDate;
                }
            }
        }

        public void UpdateEndDateFromDuration()
        {
            if (StartDate.HasValue)
            {
                EndDate = StartDate.Value.AddDays(Duration);
            }
        }
    }

    // Lista de tareas
    private List<Task> Tasks { get; set; } = new();

    // Método para agregar una nueva tarea principal
    private void AddTask()
    {
        var newTask = new Task
            {
                Name = $"Tarea Principal {Tasks.Count(t => string.IsNullOrEmpty(t.ParentTaskName)) + 1}"
            };
        Tasks.Add(newTask);
    }

    // Método para agregar una nueva subtarea
    private void AddSubtask(Task parentTask)
    {
        var newSubtask = new Task
            {
                Name = $"Subtarea {GetSubtasks(parentTask).Count() + 1} de {parentTask.Name}",
                ParentTaskName = parentTask.Name
            };
        Tasks.Add(newSubtask);

        // Actualizar la tarea principal
        UpdateParentTask(parentTask);
    }

    // Método para obtener las subtareas de una tarea principal
    private IEnumerable<Task> GetSubtasks(Task parentTask)
    {
        return Tasks.Where(t => t.ParentTaskName == parentTask.Name);
    }

    // Método para actualizar la fecha de inicio
    private void UpdateStartDate(Task task, DateTime? newValue)
    {
        task.StartDate = newValue;
        task.UpdateEndDateFromDuration();

        // Si es una subtarea, actualizar la tarea principal
        if (!string.IsNullOrEmpty(task.ParentTaskName))
        {
            var parentTask = Tasks.FirstOrDefault(t => t.Name == task.ParentTaskName);
            if (parentTask != null)
            {
                UpdateParentTask(parentTask);
            }
        }

        // Recalcular dependencias
        CalculateDependencies();
    }

    // Método para actualizar la fecha final
    private void UpdateEndDate(Task task, DateTime? newValue)
    {
        task.EndDate = newValue;
        task.UpdateStartDateAndDuration();

        // Si es una subtarea, actualizar la tarea principal
        if (!string.IsNullOrEmpty(task.ParentTaskName))
        {
            var parentTask = Tasks.FirstOrDefault(t => t.Name == task.ParentTaskName);
            if (parentTask != null)
            {
                UpdateParentTask(parentTask);
            }
        }

        // Recalcular dependencias
        CalculateDependencies();
    }

    // Método para actualizar la duración
    private void UpdateDuration(Task task, string newValue)
    {
        if (TryParseDuration(newValue, out var parsedDuration))
        {
            task.Duration = parsedDuration;

            // Actualizar la fecha final basada en la nueva duración
            task.UpdateEndDateFromDuration();

            // Si es una subtarea, actualizar la tarea principal
            if (!string.IsNullOrEmpty(task.ParentTaskName))
            {
                var parentTask = Tasks.FirstOrDefault(t => t.Name == task.ParentTaskName);
                if (parentTask != null)
                {
                    UpdateParentTask(parentTask);
                }
            }

            // Recalcular dependencias
            CalculateDependencies();
        }
    }

    // Método para interpretar la duración ingresada por el usuario
    static bool TryParseDuration(string input, out int durationInDays)
    {
        durationInDays = 0;

        if (string.IsNullOrWhiteSpace(input))
        {
            return false;
        }

        // Eliminar espacios en blanco
        input = input.Trim();

        // Extraer el número y la unidad usando una expresión regular
        var match = System.Text.RegularExpressions.Regex.Match(input, @"^(\d+)([dwmy]?)$");
        if (!match.Success)
        {
            return false; // Formato no válido
        }

        // Obtener el valor numérico
        if (!int.TryParse(match.Groups[1].Value, out var numericValue) || numericValue < 0)
        {
            return false; // Valor numérico no válido
        }

        // Obtener la unidad (d = día, w = semana, m = mes, y = año)
        var unit = match.Groups[2].Value.ToLower();
        switch (unit)
        {
            case "d": // Días
                durationInDays = numericValue;
                break;

            case "w": // Semanas
                durationInDays = numericValue * 7;
                break;

            case "m": // Meses (aproximadamente 30 días por mes)
                durationInDays = numericValue * 30;
                break;

            case "y": // Años (aproximadamente 365 días por año)
                durationInDays = numericValue * 365;
                break;

            case "": // Sin unidad, asumimos días
                durationInDays = numericValue;
                break;

            default:
                return false; // Unidad no reconocida
        }

        return true;
    }

    // Método para actualizar el nombre de la dependencia
    private void UpdateDependencyName(Task task, string newValue)
    {
        task.DependencyName = newValue;
        CalculateDependencies();
    }

    // Método para actualizar el tipo de dependencia
    private void UpdateDependencyType(Task task, string newValue)
    {
        task.DependencyType = newValue;
        CalculateDependencies();
    }

    // Método para calcular fechas basadas en dependencias
    private void CalculateDependencies()
    {
        foreach (var task in Tasks)
        {
            if (!string.IsNullOrEmpty(task.DependencyName))
            {
                var dependencyTask = Tasks.FirstOrDefault(t => t.Name == task.DependencyName);
                if (dependencyTask != null)
                {
                    switch (task.DependencyType)
                    {
                        case "SS": // Start-Start
                            task.StartDate = dependencyTask.StartDate;
                            task.UpdateEndDateFromDuration();
                            break;

                        case "SE": // Start-End
                            task.EndDate = dependencyTask.StartDate;
                            task.UpdateStartDateAndDuration();
                            break;

                        case "ES": // End-Start
                            task.StartDate = dependencyTask.EndDate;
                            task.UpdateEndDateFromDuration();
                            break;

                        case "EE": // End-End
                            task.EndDate = dependencyTask.EndDate;
                            task.UpdateStartDateAndDuration();
                            break;
                    }
                }
            }
        }
    }

    // Método para actualizar la tarea principal basada en sus subtareas
    private void UpdateParentTask(Task parentTask)
    {
        var subtasks = GetSubtasks(parentTask);

        if (subtasks.Any())
        {
            // Calcular la fecha de inicio más temprana
            parentTask.StartDate = subtasks.Min(st => st.StartDate);

            // Calcular la fecha final más tardía
            parentTask.EndDate = subtasks.Max(st => st.EndDate);

            // Calcular la duración
            parentTask.UpdateEndDateAndDuration();
        }
        else
        {
            // Si no hay subtareas, resetear las fechas y duración
            parentTask.StartDate = null;
            parentTask.EndDate = null;
            parentTask.Duration = 0;
        }

        // Recalcular dependencias
        CalculateDependencies();
    }

    // Método para obtener las tareas que dependen de una tarea específica
    private IEnumerable<Task> GetDependentTasks(Task task)
    {
        return Tasks.Where(t => t.DependencyName == task.Name);
    }
}