@using Shared.Enums.MilestoneRelationTypes
@* MilestoneRow.razor *@
<tr style="background-color: @BackgroundColor;" @onclick=@(()=>OnClick(Model))>
    <td style="padding-left: @(IndentLevel * 20)px;">
        <FluentLabel Typo="Typography.Body" Style="width:30px">@Model.Order</FluentLabel>
    </td>
    <td>
        <FluentTextField Value="@Model.Name" ValueChanged="newValue => OnChangeName(Model, newValue)" Style="width: 200px;" />
    </td>
    <td>
        <FluentDatePicker Value="@Model.StartDate" ValueChanged="newValue => OnChangeStartDate(Model, newValue)" Style="width: 100%;" />
    </td>
    <td>
        <FluentDatePicker Value="@Model.EndDate" ValueChanged="newValue => OnChangeEndDate(Model, newValue)" Style="width: 100%;" />
    </td>
    <td>
        <FluentTextField Value="@Model.DurationInput" ValueChanged="newValue => OnChangeDuration(Model, newValue)" Style="width: 100%;" />
    </td>
    <td>
        <div class="select-container">
            <select value="@Model.DependencyName" @onchange="HandleDependencyChange" class="custom-select">
                <option value="">None</option>
                @foreach (var otherTask in AllItems.Where(t => t != Model))
                {
                    <option value="@otherTask.Name">@otherTask.Name</option>
                }
            </select>
        </div>

    </td>
    <td>
        <div class="select-container">
            <select value="@Model.DependencyType.Name" @onchange="HandleDependencyTypeChange" class="custom-select">
                @foreach (var relationType in MilestoneRelationTypeEnum.List)
                {
                    <option value="@relationType.Name">@relationType.Name</option>
                }
            </select>
        </div>
    </td>
</tr>

@if (SubTasks.Any())
{
    foreach (var subMilestone in SubTasks)
    {
        <MilestoneRow Model="subMilestone" AllItems="@AllItems" IndentLevel="IndentLevel + 1"
                      SelectedRow="SelectedRow"
                      SelectedRowChanged="SelectedRowChanged"
                      ChangeName="ChangeName"
                      ChangeStartDate="ChangeStartDate"
                      ChangeEndDate="ChangeEndDate"
                      ChangeDuration="ChangeDuration"
                      ChangeDependency="ChangeDependency"
                      ChangeDependencyType="ChangeDependencyType" />
    }
}
<style>
    .select-container {
        position: relative; /* Contenedor relativo para el posicionamiento absoluto del select */
    }

    .custom-select {
        max-width: 100%; /* Establecer un ancho máximo del 100% */
        width: 100%; /* Ajustar el ancho al 100% del contenedor */
        display: block; /* Comportarse como un bloque */
        z-index: 1000; /* Asegurar que el listado esté por encima de otros elementos */
        background-color: white; /* Fondo blanco para el listado */
        border: 1px solid #ddd; /* Borde para el listado */
        overflow-y: auto; /* Habilitar el desplazamiento vertical */
        padding: 0.375rem 0.75rem; /* Padding similar a FluentSelect */
        font-size: 1rem; /* Tamaño de fuente similar a FluentSelect */
        line-height: 1.5; /* Altura de línea similar a FluentSelect */
        border-radius: 0.25rem; /* Bordes redondeados similares a FluentSelect */
        -webkit-appearance: none; /* Eliminar apariencia por defecto en navegadores WebKit */
        -moz-appearance: none; /* Eliminar apariencia por defecto en navegadores Firefox */
        appearance: none; /* Eliminar apariencia por defecto en navegadores modernos */
    }
</style>
@code {
    private async Task HandleDependencyChange(ChangeEventArgs e)
    {
        var newValue = e!.Value!.ToString();

        await OnChangeDependency(Model, newValue);
    }

    private async Task HandleDependencyTypeChange(ChangeEventArgs e)
    {

        await OnChangeDependencyType(Model, e);
    }
}