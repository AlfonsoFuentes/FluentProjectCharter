


 <tr class="data-row" @onclick="() => OnClick.InvokeAsync(Task)">
    <!-- Expand Icon -->
    <td class="col-expand">
        @if (Task.OrderedSubGanttTasks.Any())
        {
            @if (Task.IsExpanded)
            {
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronDown())" OnClick="() => OnToggleTask(Task)" />
            }
            else
            {
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronRight())" OnClick="() => OnToggleTask(Task)" />
            }
        }
        else
        {
            <span>&nbsp;</span>
        }
    </td>

    <!-- ID -->
    <td class="col-id">@Task.LabelOrder</td>

    <!-- WBS -->
    <td class="col-wbs">@Task.WBS</td>

    <!-- Name -->
    <td class="col-name @(Task.IsEditing ? "edit-mode" : "") @(Task.OrderedSubGanttTasks.Any() ? "has-subdeliverables" : "")">
        @if (Task.IsEditing)
        {
            <FluentTextArea Value=@Task.Name
                            ValueChanged=OnChangeName
                            Rows="3"
                            Class="fluent-text-area"
                            Resize=TextAreaResize.Vertical
                            Immediate=true>
            </FluentTextArea>
        }
        else
        {
            @Task.Name
        }
    </td>

    <!-- Start Date -->
    <td class="col-start-date @(Task.IsEditing ? "edit-mode" : "")">
        @if (!Task.IsEditing || Task.SubGanttTasks.Any() || Task.Dependants.Any())
        {
            @Task.StartDateValue.ToString("d")
        }
        else
        {
            <FluentDatePicker Value="@Task.StartDate"
                              ValueChanged="OnChangeStartDate"
                              Class="fluent-date-picker">
            </FluentDatePicker>
        }
    </td>

    <!-- End Date -->
    <td class="col-end-date @(Task.IsEditing ? "edit-mode" : "")">
        @if (!Task.IsEditing || Task.SubGanttTasks.Any() || Task.Dependants.Any())
        {
            @Task.EndDateValue.ToString("d")
        }
        else
        {
            <FluentDatePicker Value="@Task.EndDate"
                              ValueChanged="OnChangeEndDate"
                              Class="fluent-date-picker">
            </FluentDatePicker>
        }
    </td>

    <!-- Duration -->
    <td class="col-duration @(Task.IsEditing ? "edit-mode" : "")">
        @if (Task.IsEditing)
        {
            <FluentTextField Value=@Task.Duration
                             ValueChanged=OnChangeDuration
                             Class="fluent-text-field"
                             Immediate=true>
            </FluentTextField>
        }
        else
        {
            @Task.Duration
        }
    </td>

    <!-- Dependencies -->
    <td class="col-dependencies @(Task.IsEditing ? "edit-mode" : "")">
        @if (Task.IsEditing)
        {
            <FluentTextField Value=@Task.sDependences
                             ValueChanged=OnChangeDependences
                             Class="fluent-text-field"
                             Immediate=true>
            </FluentTextField>
        }
        else
        {
            @Task.sDependences
        }
    </td>

    <!-- Dependency Type -->
    <td class="col-dependency-type @(Task.IsEditing ? "edit-mode" : "")">
        @if (Task.Dependants.Any())
        {
            @if (Task.IsEditing)
            {
                <select value="@Task.DependencyType.Id" @onchange="OnChangeDependencyType" class="task-relation-selector">
                    @foreach (var option in TasksRelationTypeEnum.List)
                    {
                        <option value="@option.Id">@option.Name</option>
                    }
                </select>
            }
            else
            {
                @Task.DependencyType?.Name
            }
        }
    </td>

    <!-- Lag -->
    <td class="col-lag @(Task.IsEditing ? "edit-mode" : "")">
        @if (Task.IsEditing)
        {
            <FluentTextField Value=@Task.Lag
                             ValueChanged=OnChangeLag
                             Class="fluent-text-field"
                             Immediate=true>
            </FluentTextField>
        }
        else
        {
            @Task.Lag
        }
    </td>

    <!-- Budget -->
    <td class="col-budget">@Task.sTotalBudget</td>

    <!-- Actions -->
    <td class="col-actions">
        @if (Task.IsEditing)
        {
            <IconButton IconEnd="@(new Icons.Regular.Size16.Save())" OnClick="async () => await OnSave.InvokeAsync(Task)" ToolTip="Save" Disabled="@DisableSaveButton(Task)" />
            <IconButton IconEnd="@(new Icons.Regular.Size16.CalendarCancel())" OnClick="() => OnCancel.InvokeAsync(Task)" ToolTip="Cancel" />
        }
        else
        {
            <IconButton IconEnd="@(new Icons.Regular.Size16.List())" OnClick="@(() => Task.ShowBudgetItems = !Task.ShowBudgetItems)" ToolTip="Show BudgetItems" />
            <IconButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="() => OnEdit.InvokeAsync(Task)" ToolTip="Edit" Disabled=@Task.ShowBudgetItems />
            <IconButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="() => OnDelete.InvokeAsync(Task)" ToolTip="Delete" Disabled=@Task.ShowBudgetItems />
        }
    </td>
   
</tr>
<!-- Mostrar Elementos del Presupuesto -->
@if (Task.ShowBudgetItems)
{
    <tr>
        <td colspan="12" style="padding: 0;">
            <div>
                <BudgetItemsTableForGanttTasks GanttTask="@Task" GetAll="GetAll"></BudgetItemsTableForGanttTasks>
            </div>
        </td>
    </tr>
}
<!-- Subtareas Expandidas -->
@if (Task.IsExpanded)
{
    foreach (var subtask in Task.OrderedSubGanttTasks)
    {
        <GanttTaskRow @bind-Deliverable="@Deliverable"
                             Task="@subtask"
                             OnEdit="OnEdit"
                             OnSave="OnSave"
                             OnCancel="OnCancel"
                             OnDelete="OnDelete"                        
                             OnClick="OnClick"></GanttTaskRow>
    }
}

@code { 
    // [Parameter]
    // public string SelectedTimeUnit { get; set; } = string.Empty;

    // private double CalculateBarPosition(GanttTaskResponse row)
    // {
    //     double totalDuration = Response.Duration.TotalDays;
    //     double position = ((row.StartDateValue - Response.StartDate).TotalDays / totalDuration) * 100;
    //     return Math.Max(0, position);
    // }

    // private double CalculateBarWidth(GanttTaskResponse row)
    // {
    //     double totalDuration = Response.Duration.TotalDays;
    //     double width = (row.DurationInDays / totalDuration) * 100;
    //     return Math.Min(100, width);
    // }
}
