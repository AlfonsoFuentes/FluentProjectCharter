<div class="data-row @(Row.IsEditing ? "edit-mode" : "")" style="@Response.Styles.GridStyle" @onclick="() => OnClick.InvokeAsync(Row)">
    <!-- Icono de Expansión -->
    <span class="col-generic">
        @if (Row.OrderedSubDeliverables.Any())
        {
            @if (Row.IsExpanded)
            {
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronDown())" OnClick="() => OnToggleTask(Row)" />
            }
            else
            {
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ChevronRight())" OnClick="() => OnToggleTask(Row)" />
            }
        }
        else
        {
            <span>&nbsp;</span>
        }
    </span>

    <!-- ID -->
    <span class="col-id">@Row.LabelOrder</span>

    <!-- WBS -->
    <span class="col-wbs">@Row.WBS</span>

    <!-- Nombre -->
    <span class="col-name @(Row.IsEditing ? "edit-mode" : "") @(Row.OrderedSubDeliverables.Any() ? "has-subdeliverables" : "")">
        @if (Row.IsEditing)
        {
            <FluentTextArea Value=@Row.Name
                            ValueChanged=OnChangeName
                            Rows="3"
                            Class="fluent-text-area"
                            Resize=TextAreaResize.Vertical
                            Immediate=true>
            </FluentTextArea>
        }
        else
        {
            @Row.Name
        }
    </span>

    <!-- Fecha de Inicio -->
    <span class="col-date @(Row.IsEditing ? "edit-mode" : "")">
        @if (!Row.IsEditing || Row.SubDeliverables.Any() || Row.Dependants.Any())
        {
            @Row.StartDateValue.ToString("d")
        }
        else
        {
            <FluentDatePicker Value="@Row.StartDate" 
                              ValueChanged="OnChangeStartDate" 
                              
                              Class="fluent-date-picker">
            </FluentDatePicker>
        }
    </span>

    <!-- Fecha de Fin -->
    <span class="col-date @(Row.IsEditing ? "edit-mode" : "")">
        @if (!Row.IsEditing || Row.SubDeliverables.Any() || Row.Dependants.Any())
        {
            @Row.EndDateValue.ToString("d")
        }
        else
        {
            <FluentDatePicker Value="@Row.EndDate" 
                              ValueChanged="OnChangeEndDate" 
                              Class="fluent-date-picker">
            </FluentDatePicker>
        }
    </span>

    <!-- Duración -->
    <span class="col-generic @(Row.IsEditing ? "edit-mode" : "")">
        @if (Row.IsEditing)
        {
            <FluentTextField Value=@Row.Duration 
                            ValueChanged=OnChangeDuration 
                            Class="fluent-text-field" 
                            Immediate=true>
            </FluentTextField>
        }
        else
        {
            @Row.Duration
        }
    </span>

    <!-- Dependencias -->
    <span class="col-generic @(Row.IsEditing ? "edit-mode" : "")">
        @if (Row.IsEditing)
        {
            <FluentTextField Value=@Row.sDependences 
                            ValueChanged=OnChangeDependences 
                            Class="fluent-text-field" 
                            Immediate=true>
            </FluentTextField>
        }
        else
        {
            @Row.sDependences
        }
    </span>

    <!-- Tipo de Dependencia -->
    <span class="col-generic @(Row.IsEditing ? "edit-mode" : "")">
        @if (Row.Dependants.Any())
        {
            @if (Row.IsEditing)
            {
                <select value="@Row.DependencyType.Id" @onchange="OnChangeDependencyType" class="task-relation-selector">
                    @foreach (var option in TasksRelationTypeEnum.List)
                    {
                        <option value="@option.Id">@option.Name</option>
                    }
                </select>

     
            }
            else
            {
                @Row.DependencyType?.Name
            }
        }
    </span>

    <!-- Lag -->
    <span class="col-generic @(Row.IsEditing ? "edit-mode" : "")">
        @if (Row.IsEditing)
        {
            <FluentTextField Value=@Row.Lag 
                            ValueChanged=OnChangeLag 
                            Class="fluent-text-field" 
                            Immediate=true>
            </FluentTextField>
        }
        else
        {
            @Row.Lag
        }
    </span>

    <!-- Presupuesto -->
    <span class="col-generic">@Row.sTotalBudget</span>

    <!-- Acciones -->
    <span class="col-actions">
        @if (Row.IsEditing)
        {
            <IconButton IconEnd="@(new Icons.Regular.Size16.Save())" OnClick="async () => await OnSave.InvokeAsync(Row)" ToolTip="Save" Disabled="@DisableSaveButton(Row)" />
            <IconButton IconEnd="@(new Icons.Regular.Size16.CalendarCancel())" OnClick="() => OnCancel.InvokeAsync(Row)" ToolTip="Cancel" />
        }
        else
        {
            <IconButton IconEnd="@(new Icons.Regular.Size16.List())" OnClick="@(() => Row.ShowBudgetItems = !Row.ShowBudgetItems)" ToolTip="Show BudgetItems" />
            <IconButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="() => OnEdit.InvokeAsync(Row)" ToolTip="Edit" Disabled=@Row.ShowBudgetItems/>
            <IconButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="() => OnDelete.InvokeAsync(Row)" ToolTip="Delete"  Disabled=@Row.ShowBudgetItems />
        }
    </span>
</div>

<!-- Mostrar Elementos del Presupuesto -->
@if (Row.ShowBudgetItems)
{
    <tr>
        <td colspan="12" style="padding: 0;">
            <div class="expanded-row">
                <BudgetItemsTableForDeliverables Deliverable="@Row" GetAll="GetAll"></BudgetItemsTableForDeliverables>
            </div>
        </td>
    </tr>
}

<!-- Subtareas Expandidas -->
@if (Row.IsExpanded)
{
    foreach (var subtask in Row.OrderedSubDeliverables)
    {
        <DeliverableRow @bind-Response="@Response"
                           Row="@subtask"
                           OnEdit="OnEdit"
                           OnSave="OnSave"
                           OnCancel="OnCancel"
                           OnDelete="OnDelete"
                           OnClick="OnClick"></DeliverableRow>
    }
}

@code {

}