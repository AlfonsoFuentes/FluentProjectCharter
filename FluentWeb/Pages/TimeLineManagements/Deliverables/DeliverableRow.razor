@using Shared.Enums.TasksRelationTypeTypes
@using Shared.Models.Deliverables.Responses.NewResponses
<tr @ondblclick="() => OnDoubleClick.InvokeAsync(Item)"
@onclick="() => OnClick.InvokeAsync(Item)"
class="@(SelectedRow == Item ? "active-row" : "")">
    <!-- Columnas -->
    <td class="column-labelorder soft-border text-center">
        <b>@Item.LabelOrder</b>
    </td>
    <td class="soft-border" style="padding-left:@(CalculatepaddingWBS(Level));padding-right:10px;padding-top:10px;padding-bottom:10px; width: @(CalculateWBSWidth(Level))">
        <span class="wbs-label">@Item.WBS</span>
    </td>
    <td class="column-name soft-border">
        <EditableField T="string" Value="Item.Name" OnValueChanged="newValue => OnChangeName.Invoke(Item, newValue)" IsEditable="EditRow == Item || CreateRow == Item" />
    </td>
    <td class="column-date soft-border text-center">
        <EditableDateField T="DateTime" Value="Item.StartDate" OnValueChanged="newValue => OnChangeStartDate.Invoke(Item, newValue)" IsEditable="(EditRow == Item || CreateRow == Item)&&Item.SubDeliverables.Count==0" />
    </td>
    <td class="column-date soft-border text-center">
        <EditableDateField T="DateTime" Value="Item.EndDate" OnValueChanged="newValue => OnChangeEndDate.Invoke(Item, newValue)" IsEditable="(EditRow == Item || CreateRow == Item)&&Item.SubDeliverables.Count==0" />
    </td>
    <td class="column-duration soft-border text-center">
        <EditableField T="string" Value="Item.Duration" OnValueChanged="newValue => OnChangeDuration.Invoke(Item, newValue)" IsEditable="(EditRow == Item || CreateRow == Item)&&Item.SubDeliverables.Count==0" />
    </td>
    <td class="column-dependencies soft-border">
        <EditableField T="string" Value="Item.sDependences" OnValueChanged="newValue => OnChangeDependencies.Invoke(Item, newValue)" IsEditable="(EditRow == Item || CreateRow == Item)&&Item.SubDeliverables.Count==0" />
    </td>
    <td class="column-type soft-border text-center">
        @if ((EditRow == Item || CreateRow == Item))
        {
            <TaskRelationTypeSelector SelectedValue="@Item.DependencyType"
            OnValueChanged="@((arg)=>OnChangeDependencyType.Invoke(Item,arg))" />

        }
        else
        {
            @Item.DependencyType.Name
        }



    </td>
    <td class="column-actions soft-border text-center">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment=HorizontalAlignment.Center>
            @if (EditRow == Item)
            {
                <IconButton IconEnd="@(new Icons.Regular.Size20.Save())" OnClick="async () => await OnSaveEdit.InvokeAsync(Item)" ToolTip="Save" Disabled="@DisableSaveButton(Item)" />
                <IconButton IconEnd="@(new Icons.Regular.Size20.CalendarCancel())" OnClick="() => OnCancelEdit.InvokeAsync(Item)" ToolTip="Cancel" />
            }
            else if (CreateRow == Item)
            {
                <IconButton IconEnd="@(new Icons.Regular.Size20.Save())" OnClick="async () => await OnSaveCreate.InvokeAsync(Item)" ToolTip="Save" Disabled="@DisableSaveButton(Item)" />
                <IconButton IconEnd="@(new Icons.Regular.Size20.CalendarCancel())" OnClick="() => OnCancelCreate.InvokeAsync(Item)" ToolTip="Cancel" />
            }
            else
            {

                <IconButton IconEnd="@(new Icons.Regular.Size20.Edit())" OnClick="() => OnEdit.InvokeAsync(Item)" ToolTip="Edit" />
                <IconButton IconEnd="@(new Icons.Regular.Size20.Delete())" OnClick="() => OnDelete.InvokeAsync(Item)" ToolTip="Delete" />
            }
        </FluentStack>
    </td>
</tr>
@if (Item.SubDeliverables != null && Item.SubDeliverables.Any())
{
    foreach (var deliverable in Item.OrderedSubDeliverables)
    {
        <DeliverableRow CreateRow="CreateRow"
        EditRow="EditRow"
        SelectedRow="SelectedRow"
        Level="@(Level+1)"
        OnCancelCreate="OnCancelCreate"
        OnCancelEdit="OnCancelEdit"
        OnChangeDependencies="OnChangeDependencies"
        OnChangeDependencyType="OnChangeDependencyType"
        OnChangeDuration="OnChangeDuration"
        OnChangeEndDate="OnChangeEndDate"
        OnChangeName="OnChangeName"
        OnChangeStartDate="OnChangeStartDate"
        OnClick="OnClick"
        OnDelete="OnDelete"
        OnDoubleClick="OnDoubleClick"
        OnSaveCreate="OnSaveCreate"
        OnSaveEdit="OnSaveEdit"
        OnEdit="OnEdit"
        Item="deliverable">

        </DeliverableRow>
    }


}
<style>

    .column-labelorder {
    width: 5%;
    }

    .column-name {
    width: 35%;
    }

    .column-date {
    width: 10%;
    }

    .column-duration {
    width: 8%;
    }

    .column-type {
    width: 10%;
    }

    .column-dependencies {
    width: 12%;
    }

    .column-actions {
    width: 10%;
    }

    .soft-border {
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    padding: 1px;
    background-color: #ffffff;
    transition: all 0.3s ease;
    }

    .active-row {
    background-color: #f0f8ff;
    transition: background-color 0.3s ease;
    }

    .recursive-table {
    border-collapse: collapse;
    width: 100%;
    }

    /* Estilo para las filas */
    .recursive-table-row {
    border: none;
    }
</style>
@code {
    private Dictionary<int, string> _wbsWidthCache = new();

    private string CalculateWBSWidth(int level)
    {
        if (!_wbsWidthCache.TryGetValue(level, out var width))
        {
            int baseWidth = 150;
            int incrementPerLevel = 30;
            width = $"{baseWidth + (level * incrementPerLevel)}px";
            _wbsWidthCache[level] = width;
        }
        return width;
    }
    private string CalculatepaddingWBS(int level)
    {
        var result = (level + 1) * 10;
        var stringresult = $"{result}px";
        return stringresult;
    }
    private TasksRelationTypeEnum _selectedRelation = TasksRelationTypeEnum.None;

    private void HandleRelationChanged(TasksRelationTypeEnum newRelation)
    {
        _selectedRelation = newRelation;
    }

    private void HandleInputDependencies(DeliverableResponse item, string dependencies)
    {


    }
}
