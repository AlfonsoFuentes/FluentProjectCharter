@page "/PurchaseOrderCreated"
@* <FluentStack Orientation="Orientation.Vertical" Width="100%">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalAlignment="VerticalAlignment.Center">
    </FluentStack>
    <div class="grid" style="width: 100%; overflow-x:auto;">

        <FluentDataGrid id="defaultGrid"
                        Items=@FilteredItems.AsQueryable()
                        TGridItem="PurchaseOrderResponse"
                        AutoFit="true"
                        Pagination="@pagination"
                        DisplayMode="DataGridDisplayMode.Table"
                        RowSize="@DataGridRowSize.Small"
                        Style="width:100%">

            <PropertyColumn Property="@(p => p.PurchaseRequisition)" Title="PR" />
            <PropertyColumn Property="@(p => p.Name)" Title="Name" />
            <PropertyColumn Property="@(p => p.AccountAssigment)" Title="Account" />
            <PropertyColumn Property="@(p => p.SupplierName)" Title="Supplier" />
            <PropertyColumn Property="@(p => p.sTotalUSD)" Title="Value, USD" />
            <TemplateColumn Width="15%">
                <IconButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => Edit(context))" ToolTip="Edit"></IconButton>
                <IconButton IconEnd="@(new Icons.Regular.Size16.ApprovalsApp())" OnClick="@(() => Approve(context))" ToolTip="Approve"></IconButton>
                <IconButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Delete(context))" ToolTip="Delete"></IconButton>


            </TemplateColumn>


        </FluentDataGrid>
    </div>
    @if (pages == MaxNumberOfPages)
    {
        <div class="page-buttons">
            Page:
            @if (pagination.TotalItemCount.HasValue)
            {
                for (var pageIndex = 0; pageIndex <= pagination.LastPageIndex; pageIndex++)
                {
                    var capturedIndex = pageIndex;
                    <MudButton  @onclick="@(() => GoToPageAsync(capturedIndex))"
                                  Appearance="@PageButtonAppearance(capturedIndex)"
                                  aria-current="@AriaCurrentValue(capturedIndex)"
                                  aria-label="@AriaLabel(capturedIndex + 1)">
                        @(capturedIndex + 1)
                    </MudButton >
                }
            }
        </div>

    }

</FluentStack> *@
@code {
    // bool debug = true;
    // int pages => Items.Count >= MaxNumberOfPages ? MaxNumberOfPages : Items.Count;
    // int MaxNumberOfPages = 20;
    // PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    // private async Task GoToPageAsync(int pageIndex)
    // {
    //     await pagination.SetCurrentPageIndexAsync(pageIndex);
    // }

    // private Appearance PageButtonAppearance(int pageIndex)
    //     => pagination.CurrentPageIndex == pageIndex ? Appearance.Accent : Appearance.Neutral;

    // private string? AriaCurrentValue(int pageIndex)
    //     => pagination.CurrentPageIndex == pageIndex ? "page" : null;

    // private string AriaLabel(int pageIndex)
    //     => $"Go to page {pageIndex}";

    // private void HandleNameFilter(ChangeEventArgs args)
    // {
    //     if (args.Value is string value)
    //     {
    //         nameFilter = value;
    //     }
    // }

    // private void HandleClear()
    // {
    //     if (string.IsNullOrWhiteSpace(nameFilter))
    //     {
    //         nameFilter = string.Empty;
    //     }
    // }

}
