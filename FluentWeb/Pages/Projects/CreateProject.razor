@page "/CreateProject"
<CreateTemplate @ref=Form TItem="CreateProjectRequest" @bind-Model="@Model"
                Title="Create Project">
    <Content>
        <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px; ">
            <FluentGridItem xs="12" sm="12" md="6">
                <TextArea Label="Name"
                          @bind-Value=@Model.Name
                          Rows="3"
                          Placeholder="Define name"
                          Validate="Form.ValidateAsync"></TextArea>
                <ValidationMessage For="() => Model.Name" style="color:red; font-size:x-small;" />
            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="6">
               
            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px; ">
                    <FluentGridItem xs="12">
                        <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="1" Width="100%">
                            <FluentSelect TOption="ProjectNeedTypeEnum"
                                          Label="Select Project Need"
                                          Items="@ProjectNeedTypeEnum.List"
                                          Id="people-listbox"
                                          Width="60%"
                                          Height="350px"
                                          @onchange=@ChangeSelectProjectNeed
                                          Placeholder="Make a selection..."
                                          OptionValue="@(p => p.Name)"
                                          OptionText="@(p => p.Name)"
                                          @bind-Value="@Model.ProjectNeedType.Name"
                                          @bind-SelectedOption="@Model.ProjectNeedType" />


                            <ValidationMessage For="() => Model.ProjectNeedType" style="color:red; font-size:x-small;" />
                        </FluentStack>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="1" Width="100%">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="1" Width="100%">
                                <FluentSelect TOption="StakeHolderResponse"
                                              Label="Select a Manager"
                                              Items="@StakeHolderResponseList.Items"
                                              Id="people-listbox"
                                              Width="60%"
                                              Height="350px"
                                              Immediate="true"
                                              @onchange="ChangeManager"
                                              Placeholder="Make a selection..."
                                              OptionValue="@(p => p.Name)"
                                              OptionText="@(p => p.Name)"
                                              @bind-Value="@manager"
                                              @bind-SelectedOption="@Model.Manager" />

                                <FluentButton Id="addmanager" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(()=>AddStakeHolder())">

                                </FluentButton>
                                <FluentTooltip Anchor="addmanager" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Manager</FluentTooltip>

                            </FluentStack>
                            <ValidationMessage For="() => Model.Manager" style="color:red; font-size:x-small;" />
                        </FluentStack>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="1" Width="100%">

                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="1" Width="100%">
                                <FluentSelect TOption="StakeHolderResponse"
                                              Label="Select a Sponsor"
                                              Items="@StakeHolderResponseList.Items"
                                              Id="people-listbox"
                                              Width="60%"
                                              Height="350px"
                                              Immediate="true"
                                              @onchange="ChangeSponsor"
                                              Placeholder="Make a selection..."
                                              OptionValue="@(p => p.Name)"
                                              OptionText="@(p => p.Name)"
                                              @bind-Value="@sponsor"
                                              @bind-SelectedOption="@Model.Sponsor" />

                                <FluentButton Id="addsponsor" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(()=>AddStakeHolder())">

                                </FluentButton>
                                <FluentTooltip Anchor="addsponsor" HideTooltipOnCursorLeave="true" Position=TooltipPosition.Top Delay=200>Add Sponsor</FluentTooltip>


                            </FluentStack>
                            <ValidationMessage For="() => Model.Sponsor" style="color:red; font-size:x-small;" />

                        </FluentStack>
                    </FluentGridItem>
                </FluentGrid>


            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="4">
                <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px; ">
                    <FluentGridItem xs="12">
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="3" Width="100%">
                            <FluentDatePicker Label="Project Initial Date" AriaLabel="To" @bind-Value="@Model.InitialProjectDate" DoubleClickToDate="@Model.InitialProjectDate" />
                            <ValidationMessage For="() => Model.InitialProjectDate" style="color:red; font-size:x-small;" />
                        </FluentStack>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="3" Width="100%">
                            <FluentSelect TOption="ProjectStatusEnum"
                                          Label="Select Project status"
                                          Items="@ProjectStatusEnum.List"
                                          Id="people-listbox"
                                          Width="60%"
                                          Height="350px"
                                          @onchange=@ChangeSelectProjectStatus
                                          Placeholder="Make a selection..."
                                          OptionValue="@(p => p.Name)"
                                          OptionText="@(p => p.Name)"
                                          Disabled="true"
                                          @bind-Value="@Model.Status.Name"
                                          @bind-SelectedOption="@Model.Status" />


                            <ValidationMessage For="() => Model.Status" style="color:red; font-size:x-small;" />
                        </FluentStack>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                       
                    </FluentGridItem>
                </FluentGrid>
            </FluentGridItem>
            <FluentGridItem xs="12" sm="12" md="4">
                <NumberField Label="%Engineering" @bind-Value=@Model.PercentageEngineering Validate="Form.ValidateAsync"></NumberField>
                <ValidationMessage For="() => Model.PercentageEngineering" style="color:red; font-size:x-small;" />
                <NumberField Label="%Contingency" @bind-Value=@Model.PercentageContingency Validate="Form.ValidateAsync"></NumberField>
                <ValidationMessage For="() => Model.PercentageContingency" style="color:red; font-size:x-small;" />
                <FluentCheckbox Label="Is Productive Asset?" @bind-Value=@Model.IsProductiveAsset></FluentCheckbox>
                @if(!Model.IsProductiveAsset)
                {
                    <NumberField Label="%Tax (VAT)" @bind-Value=@Model.PercentageTaxProductive Validate="Form.ValidateAsync"></NumberField>
                    <ValidationMessage For="() => Model.PercentageTaxProductive" style="color:red; font-size:x-small;" />
                }
            </FluentGridItem>

        </FluentGrid>
    </Content>

</CreateTemplate>

@code {
    CreateTemplate<CreateProjectRequest> Form = null!;
    int Spacing = 2;
    JustifyContent Justification = JustifyContent.SpaceBetween;

    async Task ChangeSelectProjectNeed(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.ProjectNeedType = ProjectNeedTypeEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
    async Task ChangeSelectProjectStatus(ChangeEventArgs args)
    {
        if (args == null) return;
        Model.Status = ProjectStatusEnum.GetType(args!.Value!.ToString()!);
        await Form.ValidateAsync();
    }
    string? manager;
    async Task ChangeManager(ChangeEventArgs args)
    {
        if (args == null || args.Value == null) return;
        if (StakeHolderResponseList.Items.Any(x => x.Name == args.Value.ToString()))
        {
            Model.Manager = StakeHolderResponseList.Items.Single(x => x.Name == args.Value.ToString());
            manager = args.Value.ToString();
            await Form.ValidateAsync();
        }

    }
    string? sponsor;
    async Task ChangeSponsor(ChangeEventArgs args)
    {
        if (args == null || args.Value == null) return;
        if (StakeHolderResponseList.Items.Any(x => x.Name == args.Value.ToString()))
        {
            Model.Sponsor = StakeHolderResponseList.Items.Single(x => x.Name == args.Value.ToString());
            sponsor = args.Value.ToString();
            await Form.ValidateAsync();
        }

    }


}
