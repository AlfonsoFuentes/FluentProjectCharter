<FluentStack Orientation="Orientation.Vertical" Width="100%">
    <FluentLabel Typo="Typography.Body"><strong>@Label</strong></FluentLabel>
    <FluentTextField Value="@value"
                     ValueChanged="OnStringValueChange"
                     Style="width: 100%;"
                     Placeholder="@PlaceHolder"
                     TextFieldType="@TextFieldType"
                     InputMode="@InputMode"
                     Immediate=true
                     Disabled="@Disable" />

</FluentStack>

@code {
    string value => Value.ToString();
    public TextFieldType TextFieldType { get; set; } = TextFieldType.Number;

    public InputMode InputMode { get; set; } = InputMode.Numeric;
    [Parameter]
    public bool Disable { get; set; } = false;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;
    [Parameter]
    public double Value { get; set; } = 0.0;
    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }
    [Parameter]

    public EventCallback Validate { get; set; }

    [Parameter]
    public EventCallback<double> Change { get; set; }

    public async Task OnValueChanged(double value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(Value);

        if (Change.HasDelegate) await Change.InvokeAsync(Value);
        if (Validate.HasDelegate) await Validate.InvokeAsync();

    }
    async Task OnStringValueChange(string value)
    {
        double result = 0;
        if (double.TryParse(value, out result))
        {

            await OnValueChanged(result);
        }

    }
}
