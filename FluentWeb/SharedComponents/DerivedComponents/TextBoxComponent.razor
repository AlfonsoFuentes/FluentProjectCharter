@* <FluentStack Orientation="Orientation.Vertical" Width="100%">
    <MudField  Typo="Typo.Body"><strong>@Label</strong></MudField >
    <FluentTextField Value="@Value"
                     ValueChanged="OnValueChanged"
                     Style="width: 100%;"
                     Placeholder="@PlaceHolder"
                     TextFieldType="@TextFieldType"
                     InputMode="@InputMode"
                     Immediate=true
                     Disabled="@Disable" />



</FluentStack> *@

@code {
    // [Parameter]
    // public TextFieldType TextFieldType { get; set; } = TextFieldType.Text;
    // [Parameter]
    // public InputMode InputMode { get; set; } = InputMode.Text;
    [Parameter]
    public bool Disable { get; set; } = false;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;
    [Parameter]
    public string Value { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    [Parameter]

    public EventCallback Validate { get; set; }

    [Parameter]
    public EventCallback<string> Change { get; set; }

    public async Task OnValueChanged(string value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(Value);

        if (Change.HasDelegate) await Change.InvokeAsync(Value);
        if (Validate.HasDelegate) await Validate.InvokeAsync();

    }
}
