

<FluentNumberField @bind-Value="@Value"
Label="@Label"
Style="width: 100%;"
Placeholder="@PlaceHolder"

@oninput=@((args) => OnValueChange(args!.Value!.ToString()!))
Disabled="@Disable" />



@code {


    [Parameter]
    public bool Disable { get; set; } = false;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;
    [Parameter]
    public double Value { get; set; } = 0;
    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }
    [Parameter]

    public EventCallback Validate { get; set; }

    [Parameter]
    public EventCallback<double> Change { get; set; }

    async Task OnChangeEvent(ChangeEventArgs arg)
    {
        if (arg.Value is null || arg.Value.ToString() is null) return;

        await OnValueChange(arg.Value.ToString()!);
    }
    async Task OnValueChange(string value)
    {
        double result = 0;
        if (double.TryParse(value, out result))
        {
            Value = result;
            await ValueChanged.InvokeAsync(Value);

            if (Change.HasDelegate) await Change.InvokeAsync(Value);
            if (Validate.HasDelegate) await Validate.InvokeAsync();
        }
        
    }
}
