@using Shared.Enums.TasksRelationTypeTypes

<div style="display: flex; width: 100%; height: 100%;">
    <select value="@SelectedValue.Id" @onchange="HandleValueChanged"
            style="flex: 1; width: 100%; height: 100%; box-sizing: border-box; padding: 8px; font-size: inherit;" class="select-field">
        @foreach (var option in Options)
        {
            <option value="@option.Id">@option.Name</option>
        }
    </select>
</div>
<style>
    .select-field select {
        padding: 2px;
        border-radius: 2px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        transition: border-color 0.3s ease;
    }

        .select-field select:focus {
            border-color: #007bff;
            outline: none;
        }

    
</style>
@code {
    [Parameter]
    public string Label { get; set; } = "Select Task Relation Type";

    [Parameter, EditorRequired]

    public TasksRelationTypeEnum SelectedValue { get; set; } = TasksRelationTypeEnum.None;

    [Parameter]
    public EventCallback<TasksRelationTypeEnum> OnValueChanged { get; set; }

    private List<TasksRelationTypeEnum> Options { get; set; } = TasksRelationTypeEnum.List;

    private async Task HandleValueChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var selectedId))
        {
            var selectedType = TasksRelationTypeEnum.GetType(selectedId);
            await OnValueChanged.InvokeAsync(selectedType);
        }
    }
}