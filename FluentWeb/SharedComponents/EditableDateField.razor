@typeparam T where T : struct

@if (IsEditable)
{
    <div style="display: flex; width: 100%; height: 100%;">

        <input type="date" class="select-field"
               value="@FormatDate(Value)"
               @onchange="HandleInput"
               style="flex: 1; width: 100%; height: 100%; box-sizing: border-box;  font-size: inherit;" />


    </div>

  

}
else
{
    <span>@(Value.HasValue ? FormatDate(Value) : "N/A")</span>
}
<style>
    .null-value {
        color: #888;
        font-style: italic;
    }

    .select-field {
        padding: 2px;
        border-radius: 2px;
        background-color: #f9f9f9;
        transition: border-color 0.3s ease;
    }

        .select-field:focus {
            border-color: #007bff;
            outline: none;
        }
</style>
@code {
    [Parameter] public T? Value { get; set; } // Soporte para valores nullables
    [Parameter] public EventCallback<T?> OnValueChanged { get; set; }
    [Parameter] public bool IsEditable { get; set; }

    private string FormatDate(T? value)
    {
        if (value is DateTime date && date != default)
        {
            return date.ToString("yyyy-MM-dd");
        }
        return string.Empty;
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            await OnValueChanged.InvokeAsync(default); // Valor nulo si el campo está vacío
        }
        else if (DateTime.TryParse(e.Value?.ToString(), out var newValue))
        {
            await OnValueChanged.InvokeAsync((T?)(object)newValue);
        }
    }
}