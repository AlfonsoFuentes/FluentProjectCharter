@typeparam T

@* <FluentStack Orientation="Orientation.Vertical" Width="100%">
    <MudField  Typo="Typo.Body"><strong>@Label</strong></MudField >
    <FluentAutocomplete TOption="T"
                        AutoComplete="off"
                        Width="250px"
                        Placeholder="@PlaceHolder"
                        OnOptionsSearch="@OnSearchAsync"
                        SelectedOptions="@SelectedItems"
                        SelectedOptionsChanged="OnChangeSelectedOptions"
                        Disabled=@Disable
                        MaximumSelectedOptions="1"
                        OptionText="@OptionText">
        <LabelTemplate>

            @if (LabelTemplate != null)
            {
                @LabelTemplate
            }


        </LabelTemplate>
    </FluentAutocomplete>

</FluentStack> *@



@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public RenderFragment LabelTemplate { get; set; } = null!;

    [Parameter]
    public int MaxSelectedOptions { get; set; } = 1;
    [Parameter]
    [EditorRequired]
    public Func<T, bool> Filter { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public virtual Func<T, string?> OptionText { get; set; } = null!;
    [Parameter]
    public List<T> Items { get; set; } = new();
    IEnumerable<T> SelectedItems = Array.Empty<T>();

    // private void OnSearchAsync(OptionsSearchEventArgs<T> e)
    // {
    //     var all = Items;
    //     e.Items = all.Where(Filter);
    // }
    [Parameter]
    public bool Disable { get; set; } = false;

    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;
    [Parameter]
    public T Value { get; set; } = default(T)!;
    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }
    [Parameter]

    public EventCallback Validate { get; set; }
    [Parameter]

    public EventCallback Change { get; set; }
    async Task OnChangeSelectedOptions(IEnumerable<T> value)
    {
        SelectedItems = value;
        if (MaxSelectedOptions == 1)
        {
            await ValueChanged.InvokeAsync(value.First());
        }

        if (Change.HasDelegate) await Change.InvokeAsync();
        if (Validate.HasDelegate) await Validate.InvokeAsync();
        StateHasChanged();
    }
}
