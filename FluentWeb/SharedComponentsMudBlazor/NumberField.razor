@* @using System.Globalization
@* <MudNumericField HideSpinButtons="true"
                 Value="@Value"
                 ValueChanged=OnValueChanged
                 Disabled=@Disable Placeholder="@PlaceHolder"
                 For="@For"
                 Label="@Label" Variant="Variant.Outlined" /> 



@code {
    [Parameter]
    public double Value { get; set; }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }
    async Task OnValueChanged(double value)
    {
        Value = Math.Round(Value, GetDecimalPlaces(value));
        ValueChanged.InvokeAsync(value);
        if (Change.HasDelegate)
        {
            await Change.InvokeAsync(Value);
        }

        // Validar el valor si es necesario
        if (Validate.HasDelegate)
        {
            await Validate.InvokeAsync();
        }
    }

    [Parameter]
    public Expression<Func<string>>? For { get; set; } = null!;

    [Parameter]
    public bool Disable { get; set; } = false;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public string PlaceHolder { get; set; } = string.Empty;

    [Parameter]

    public EventCallback Validate { get; set; }

    [Parameter]
    public EventCallback<double> Change { get; set; }


    // Método para determinar cuántos decimales mostrar
    private int GetDecimalPlaces(double value)
    {
        if (value >= 1 || value == 0)
            return 2; // Por defecto, muestra 2 decimales para valores mayores o iguales a 1

        // Convertir el valor a una cadena sin notación científica
        string valueStr = value.ToString("G17", System.Globalization.CultureInfo.InvariantCulture);

        // Encontrar la posición del primer dígito significativo después del punto decimal
        int decimalIndex = valueStr.IndexOf('.');
        if (decimalIndex == -1)
            return 2; // Si no hay punto decimal, asumimos 2 decimales

        int firstSignificantDigitIndex = valueStr.Skip(decimalIndex + 1).TakeWhile(c => c == '0').Count() + decimalIndex + 1;

        // El número de decimales es la posición del primer dígito significativo menos la posición del punto decimal
        return firstSignificantDigitIndex - decimalIndex;
    }
}
 *@